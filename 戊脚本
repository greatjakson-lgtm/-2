-- 加载 WindUI 主库
local WindUI = loadstring(game:HttpGet("https://raw.githubusercontent.com/Footagesus/WindUI/main/dist/main.lua"))()

-- 注册自定义 Key 验证服务（如有需要）
WindUI.Services.mysuperservicetogetkey = {
    Name = "戊脚本",
    Icon = "droplet", -- lucide, rbxassetid, raw img link
    Args = { "ServiceId" },
    New = function(ServiceId)
        function validateKey(key)
            if not key then
                return false, "Key is invalid!" 
            end
            return true, "Key is valid!" 
        end
        function copyLink()
            return setclipboard("link to key system service.")
        end
        return {
            Verify = validateKey,
            Copy = copyLink
        }
    end
}

-- 创建主窗口
local Window = WindUI:CreateWindow({
    Title = "戊脚本",
    Icon = "door-open",
    Author = "Example UI",
    Folder = "MyTestHub",
    Theme = "Dark",
    Size = UDim2.fromOffset(580, 460),
    Transparent = true,
    Resizable = true,
    SideBarWidth = 200,
    BackgroundImageTransparency = 0.42,
    HideSearchBar = true,
    ScrollBarEnabled = false,

    User = {
        Enabled = true,
        Anonymous = true,
        Callback = function()
            print("clicked user icon")
        end,
    },

    KeySystem = {
        Note = "Example Key System. With your custom service.",
        API = {
            {
                Type = "mysuperservicetogetkey",
                ServiceId = 1234,
            },
            {
                Type = "platoboost",
                ServiceId = 1234,
                Secret = "platoboost-secret",
            },
            {
                Type = "pandadevelopment",
                ServiceId = "myServiceId",
            },
        },
    }
})

-- 设置窗口背景
Window:SetBackgroundImage("rbxassetid://id-here")
Window:SetBackgroundImageTransparency(0.5)
Window:SetToggleKey(Enum.KeyCode.H)
Window:ToggleTransparency(true)
Window:IsResizable(false)
Window:EditOpenButton({
    Title = "Open Example UI",
    Icon = "monitor",
    CornerRadius = UDim.new(0,16),
    StrokeThickness = 2,
    Color = ColorSequence.new(Color3.fromHex("FF0F7B"), Color3.fromHex("F89B29")),
    OnlyMobile = false,
    Enabled = true,
    Draggable = true,
})

Window:Tag({
    Title = "v1.6.4",
    Color = Color3.fromHex("#30ff6a")
})

WindUI:Notify({
    Title = "Notification Title",
    Content = "Notification Content example!",
    Duration = 3,
    Icon = "bird",
})

-- 创建 Tab
local Tab = Window:Tab({
    Title = "功能区",
    Icon = "bird",
    Locked = false,
})
Window:SelectTab(1)

-- 创建 Section
local Section = Tab:Section({ 
    Title = "脚本区",
    TextXAlignment = "Left",
    TextSize = 17,
})

-- doors xk 按钮
local XKButton = Tab:Button({
    Title = "doors xk",
    Desc = "点击运行xk脚本",
    Locked = false,
    Callback = function()
        loadstring(game:HttpGet("https://github.com/devslopo/DVES/raw/main/XK%20Hub"))()
        WindUI:Notify({
            Title = "doors xk",
            Content = "加载成功",
            Duration = 3,
            Icon = "bird",
        })
    end
})
-- 其它控件示例（可删减）
local Button = Tab:Button({
    Title = "普通测试按钮",
    Desc = "点击测试",
    Locked = false,
    Callback = function()
        print("clicked test button")
    end
})

local Code = Tab:Code({
    Title = "代码区",
    Code = [[print("Hello World!")]]
})
Code:SetCode([[print("New code!")]])

local Colorpicker = Tab:Colorpicker({
    Title = "颜色选择器",
    Desc = "选个颜色吧",
    Default = Color3.fromRGB(0, 255, 0),
    Transparency = 0,
    Locked = false,
    Callback = function(color) 
        print("Background color: " .. tostring(color))
    end
})

local Dropdown = Tab:Dropdown({
    Title = "下拉框 (多选)",
    Values = { "A", "B", "C" },
    Value = { "A" },
    Multi = true,
    AllowNone = true,
    Callback = function(option) 
        print("选中的分类: " .. game:GetService("HttpService"):JSONEncode(option)) 
    end
})

local Input = Tab:Input({
    Title = "输入框",
    Desc = "输入内容",
    Value = "默认值",
    InputIcon = "bird",
    Type = "Input", -- or "Textarea"
    Placeholder = "请输入...",
    Callback = function(input) 
        print("输入内容: " .. input)
    end
})

local Keybind = Tab:Keybind({
    Title = "快捷键",
    Desc = "用来打开 UI",
    Value = "G",
    Callback = function(v)
        Window:SetToggleKey(Enum.KeyCode[v])
    end
})

local Paragraph = Tab:Paragraph({
    Title = "段落区",
    Desc = "展示段落",
    Color = "Red",
    Image = "",
    ImageSize = 30,
    Thumbnail = "",
    ThumbnailSize = 80,
    Locked = false,
    Buttons = {
        {
            Icon = "bird",
            Title = "段落按钮",
            Callback = function() print("段落按钮被点了") end,
        }
    }
})

local Slider = Tab:Slider({
    Title = "滑块",
    Step = 1,
    Value = {
        Min = 20,
        Max = 120,
        Default = 70,
    },
    Callback = function(value)
        print(value)
    end
})

local Toggle = Tab:Toggle({
    Title = "切换开关",
    Desc = "开关描述",
    Value = false,
    Callback = function(val)
        print("Toggle changed to: ", val)
    end
})

-- 配置管理器示例
local ConfigManager = Window.ConfigManager
local myConfig = ConfigManager:CreateConfig("myConfigExample")
myConfig:Register("SpecialNameExample", XKButton)
myConfig:Save()
myConfig:Load()
ConfigManager:AllConfigs() -- 返回所有配置表

-- 弹窗、对话框示例
local Dialog = Window:Dialog({
    Icon = "bird",
    Title = "Dialog Title",
    Content = "Content Text",
    Buttons = {
        {
            Title = "Confirm",
            Callback = function()
                print("Confirmed!")
            end,
        },
        {
            Title = "Cancel",
            Callback = function()
                print("Cancelled!")
            end,
        },
    },
})
Dialog:Show()
Dialog:Close()

WindUI:Popup({
    Title = "Popup Title",
    Icon = "info",
    Content = "Popup content",
    Buttons = {
        {
            Title = "Cancel",
            Callback = function() end,
            Variant = "Tertiary",
        },
        {
            Title = "Continue",
            Icon = "arrow-right",
            Callback = function() end,
            Variant = "Primary",
        }
    }
})
