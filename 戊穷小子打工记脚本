local WindUI = loadstring(game:HttpGet("https://raw.githubusercontent.com/Footagesus/WindUI/main/dist/main.lua"))()

local Confirmed = false

WindUI:Popup({
    Title = "穷小子打工记脚本",
    Icon = "rbxassetid://129260712070622",
    IconThemed = true,
    Content = "By: 脚本作者\nQQ群: 912837219 欢迎使用",
    Buttons = {
        {
            Title = "进入脚本",
            Icon = "arrow-right",
            Callback = function() Confirmed = true end,
            Variant = "Primary",
        }
    }
})

repeat wait() until Confirmed

-- 创建主窗口
local Window = WindUI:CreateWindow({
    Title = "穷小子打工记脚本",
    Icon = "rbxassetid://129260712070622",
    IconThemed = true,
    Author = "感谢游玩",
    Folder = "穷小子打工记",
    Size = UDim2.fromOffset(380, 270),
    Theme = "Dark",
    User = { Enabled = true },
})

Window:Tag({
    Title = "v2.0",
    Color = Color3.fromHex("#30ff6a")
})
Window:Tag({
    Title = "功能齐全", 
    Color = Color3.fromHex("#315dff")
})

-- 创建标签页
local MainTab = Window:CreateTab("主要功能", "home")
local TeleportTab = Window:CreateTab("传送功能", "map-pin")
local AutomationTab = Window:CreateTab("自动化", "settings")
local SavedLocationsTab = Window:CreateTab("位置保存", "bookmark")
local PlayerSettingsTab = Window:CreateTab("玩家设置", "user")
local MiscTab = Window:CreateTab("其他功能", "star")

-- 全局服务引用
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local HttpService = game:GetService("HttpService")
local RunService = game:GetService("RunService")
local ProximityPromptService = game:GetService("ProximityPromptService")

-- 本地玩家引用
local LP = Players.LocalPlayer
local Character = LP.Character or LP.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")

-- 位置定义
local Locations = {
    ["矿场"] = CFrame.new(100, 50, 100),
    ["汽车店"] = CFrame.new(-200, 10, 50),
    ["彩票店"] = CFrame.new(150, 10, -100),
    ["办公楼"] = CFrame.new(-100, 20, 200),
    ["河岸"] = CFrame.new(300, 5, -50),
    ["正新鸡排"] = CFrame.new(80, 15, -180),
    ["商店"] = CFrame.new(-50, 5, 150),
    ["银行"] = CFrame.new(200, 10, -80),
    ["餐厅"] = CFrame.new(-120, 5, -200),
    ["公园"] = CFrame.new(250, 20, 100)
}

-- 保存的位置数据
local SavedLocations = {}

-- 功能状态
local Features = {
    AutoMine = false,
    AutoDocument = false,
    AutoEat = false,
    AutoFish = false,
    InstantInteract = false,
    NoClip = false,
    GodMode = false
}

-- 自动功能循环
local autoLoops = {}

-- 主要功能选项卡
MainTab:CreateSection("玩家信息")
local moneyLabel = MainTab:CreateLabel("金钱: 加载中...")
local positionLabel = MainTab:CreateLabel("位置: 未知")

-- 更新玩家信息
local function updatePlayerInfo()
    local success, money = pcall(function()
        return LP:FindFirstChild("Money") and LP.Money.Value or 0
    end)
    
    if success then
        moneyLabel:Set("金钱: $" .. money)
    else
        moneyLabel:Set("金钱: 无法获取")
    end
    
    -- 更新位置信息
    if Character and Character.PrimaryPart then
        local pos = Character.PrimaryPart.Position
        positionLabel:Set(string.format("位置: X:%.1f Y:%.1f Z:%.1f", pos.X, pos.Y, pos.Z))
    end
end

-- 每3秒更新一次玩家信息
spawn(function()
    while true do
        updatePlayerInfo()
        wait(3)
    end
end)

MainTab:CreateSection("快速操作")
MainTab:CreateButton("快速赚钱", function()
    Window:Notify("快速赚钱", "开始执行快速赚钱任务...")
end)

MainTab:CreateButton("一键升级", function()
    Window:Notify("一键升级", "开始执行升级任务...")
end)

-- 传送功能选项卡
TeleportTab:CreateSection("地点传送")
for name, cf in pairs(Locations) do
    TeleportTab:CreateButton(name, function()
        if Character and Character.PrimaryPart then
            Character:SetPrimaryPartCFrame(cf)
            Window:Notify("传送成功", "已传送到: " .. name)
        else
            Window:Notify("传送失败", "角色未加载完成")
        end
    end)
end

TeleportTab:CreateSection("特殊传送")
TeleportTab:CreateButton("传送到最高点", function()
    if Character and Character.PrimaryPart then
        local highestPart = Workspace:FindFirstChildOfClass("Part")
        if highestPart then
            Character:SetPrimaryPartCFrame(CFrame.new(highestPart.Position + Vector3.new(0, 50, 0)))
            Window:Notify("传送成功", "已传送到最高点")
        end
    end
end)

-- 自动化选项卡
AutomationTab:CreateSection("工作自动化")

AutomationTab:CreateToggle("自动挖矿", false, function(value)
    Features.AutoMine = value
    if value then
        Window:Notify("自动挖矿", "自动挖矿已开启")
        if autoLoops.AutoMine then autoLoops.AutoMine:Disconnect() end
        autoLoops.AutoMine = RunService.Heartbeat:Connect(function()
            if Features.AutoMine and Character and Character.PrimaryPart then
                -- 模拟挖矿动作
                local miningSpot = Workspace:FindFirstChild("MiningSpot") or Workspace:FindFirstChild("Rock")
                if miningSpot then
                    Character:SetPrimaryPartCFrame(miningSpot.CFrame + Vector3.new(0, 0, -5))
                end
            end
        end)
    else
        if autoLoops.AutoMine then
            autoLoops.AutoMine:Disconnect()
            autoLoops.AutoMine = nil
        end
        Window:Notify("自动挖矿", "自动挖矿已关闭")
    end
end)

AutomationTab:CreateToggle("自动做文档", false, function(value)
    Features.AutoDocument = value
    if value then
        Window:Notify("自动文档", "自动文档处理已开启")
        if autoLoops.AutoDocument then autoLoops.AutoDocument:Disconnect() end
        autoLoops.AutoDocument = RunService.Heartbeat:Connect(function()
            if Features.AutoDocument and Character and Character.PrimaryPart then
                local officeDesk = Workspace:FindFirstChild("OfficeDesk") or Workspace:FindFirstChild("Desk")
                if officeDesk then
                    Character:SetPrimaryPartCFrame(officeDesk.CFrame + Vector3.new(0, 0, -3))
                end
            end
        end)
    else
        if autoLoops.AutoDocument then
            autoLoops.AutoDocument:Disconnect()
            autoLoops.AutoDocument = nil
        end
        Window:Notify("自动文档", "自动文档处理已关闭")
    end
end)

AutomationTab:CreateToggle("自动钓鱼", false, function(value)
    Features.AutoFish = value
    if value then
        Window:Notify("自动钓鱼", "自动钓鱼已开启")
        if autoLoops.AutoFish then autoLoops.AutoFish:Disconnect() end
        autoLoops.AutoFish = RunService.Heartbeat:Connect(function()
            if Features.AutoFish and Character and Character.PrimaryPart then
                local fishingSpot = Workspace:FindFirstChild("FishingSpot") or Workspace:FindFirstChild("River")
                if fishingSpot then
                    Character:SetPrimaryPartCFrame(fishingSpot.CFrame + Vector3.new(0, 0, -3))
                end
            end
        end)
    else
        if autoLoops.AutoFish then
            autoLoops.AutoFish:Disconnect()
            autoLoops.AutoFish = nil
        end
        Window:Notify("自动钓鱼", "自动钓鱼已关闭")
    end
end)

AutomationTab:CreateSection("生存自动化")
AutomationTab:CreateToggle("自动吃食物", false, function(value)
    Features.AutoEat = value
    if value then
        Window:Notify("自动进食", "自动进食已开启")
        if autoLoops.AutoEat then autoLoops.AutoEat:Disconnect() end
        autoLoops.AutoEat = RunService.Heartbeat:Connect(function()
            if Features.AutoEat and Character and Character.PrimaryPart then
                local hunger = Humanoid:FindFirstChild("Hunger") or Humanoid:FindFirstChild("Food")
                if hunger and hunger.Value < 50 then
                    local food = Workspace:FindFirstChild("Food") or Workspace:FindFirstChild("Chicken")
                    if food then
                        Character:SetPrimaryPartCFrame(food.CFrame + Vector3.new(0, 0, -3))
                        if hunger:IsA("NumberValue") then
                            hunger.Value = math.min(hunger.Value + 10, 100)
                        end
                    end
                end
            end
        end)
    else
        if autoLoops.AutoEat then
            autoLoops.AutoEat:Disconnect()
            autoLoops.AutoEat = nil
        end
        Window:Notify("自动进食", "自动进食已关闭")
    end
end)

-- 位置保存选项卡
SavedLocationsTab:CreateSection("保存当前位置")
local locationNameInput = SavedLocationsTab:CreateTextBox("位置名称", "输入位置名称", function(value) end)

SavedLocationsTab:CreateButton("保存当前位置", function()
    local name = locationNameInput:Get() or "未命名位置"
    if name == "" then name = "未命名位置" end
    
    if Character and Character.PrimaryPart then
        SavedLocations[name] = {
            X = Character.PrimaryPart.Position.X,
            Y = Character.PrimaryPart.Position.Y,
            Z = Character.PrimaryPart.Position.Z
        }
        Window:Notify("位置已保存", "已保存位置: " .. name)
    else
        Window:Notify("保存失败", "无法获取角色位置")
    end
end)

SavedLocationsTab:CreateSection("已保存的位置")
local savedLocationsContainer = SavedLocationsTab:CreateFolder("我的位置")

-- 创建保存的位置列表
local function CreateSavedLocationsList()
    savedLocationsContainer:Clear()
    
    if next(SavedLocations) == nil then
        savedLocationsContainer:CreateLabel("暂无保存的位置")
        return
    end
    
    for name, pos in pairs(SavedLocations) do
        savedLocationsContainer:CreateButton(name, function()
            local cf = CFrame.new(pos.X, pos.Y, pos.Z)
            if Character and Character.PrimaryPart then
                Character:SetPrimaryPartCFrame(cf)
                Window:Notify("传送成功", "已传送到保存的位置: " .. name)
            end
        end)
        
        savedLocationsContainer:CreateButton("删除 " .. name, function()
            SavedLocations[name] = nil
            Window:Notify("位置已删除", "已删除位置: " .. name)
            CreateSavedLocationsList()
        end)
    end
end

-- 初始化保存的位置列表
CreateSavedLocationsList()

-- 玩家设置选项卡
PlayerSettingsTab:CreateSection("移动设置")
local originalWalkSpeed = 16
local originalJumpPower = 50

PlayerSettingsTab:CreateSlider("移动速度", 16, 100, 16, function(value)
    if Humanoid then
        Humanoid.WalkSpeed = value
        Window:Notify("移动速度", "移动速度已设置为: " .. value)
    end
end)

PlayerSettingsTab:CreateSlider("跳跃高度", 50, 200, 50, function(value)
    if Humanoid then
        Humanoid.JumpPower = value
        Window:Notify("跳跃高度", "跳跃高度已设置为: " .. value)
    end
end)

PlayerSettingsTab:CreateButton("重置移动设置", function()
    if Humanoid then
        Humanoid.WalkSpeed = originalWalkSpeed
        Humanoid.JumpPower = originalJumpPower
        Window:Notify("移动设置", "移动设置已重置")
    end
end)

PlayerSettingsTab:CreateSection("角色能力")
PlayerSettingsTab:CreateToggle("无限跳跃", false, function(value)
    if value then
        if autoLoops.InfiniteJump then autoLoops.InfiniteJump:Disconnect() end
        autoLoops.InfiniteJump = RunService.Heartbeat:Connect(function()
            if Humanoid and Humanoid:GetState() == Enum.HumanoidStateType.Falling then
                Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
            end
        end)
        Window:Notify("无限跳跃", "无限跳跃已开启")
    else
        if autoLoops.InfiniteJump then
            autoLoops.InfiniteJump:Disconnect()
            autoLoops.InfiniteJump = nil
        end
        Window:Notify("无限跳跃", "无限跳跃已关闭")
    end
end)

PlayerSettingsTab:CreateToggle("穿墙模式", false, function(value)
    Features.NoClip = value
    if value then
        if autoLoops.NoClip then autoLoops.NoClip:Disconnect() end
        autoLoops.NoClip = RunService.Stepped:Connect(function()
            if Character then
                for _, part in ipairs(Character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = false
                    end
                end
            end
        end)
        Window:Notify("穿墙模式", "穿墙模式已开启")
    else
        if autoLoops.NoClip then
            autoLoops.NoClip:Disconnect()
            autoLoops.NoClip = nil
        end
        Window:Notify("穿墙模式", "穿墙模式已关闭")
    end
end)

PlayerSettingsTab:CreateToggle("无敌模式", false, function(value)
    Features.GodMode = value
    if value and Humanoid then
        Humanoid.MaxHealth = math.huge
        Humanoid.Health = math.huge
        Window:Notify("无敌模式", "无敌模式已开启")
    elseif Humanoid then
        Humanoid.MaxHealth = 100
        Humanoid.Health = 100
        Window:Notify("无敌模式", "无敌模式已关闭")
    end
end)

-- 其他功能选项卡
MiscTab:CreateSection("互动设置")
MiscTab:CreateToggle("瞬间互动", false, function(value)
    Features.InstantInteract = value
    if value then
        if autoLoops.InstantInteract then autoLoops.InstantInteract:Disconnect() end
        autoLoops.InstantInteract = ProximityPromptService.PromptButtonHoldBegan:Connect(function(prompt)
            prompt.HoldDuration = 0
        end)
        Window:Notify("瞬间互动", "瞬间互动已开启")
    else
        if autoLoops.InstantInteract then
            autoLoops.InstantInteract:Disconnect()
            autoLoops.InstantInteract = nil
        end
        Window:Notify("瞬间互动", "瞬间互动已关闭")
    end
end)

MiscTab:CreateSection("视觉设置")
MiscTab:CreateToggle("夜视模式", false, function(value)
    if value then
        game.Lighting.Ambient = Color3.new(1, 1, 1)
        game.Lighting.Brightness = 2
        Window:Notify("夜视模式", "夜视模式已开启")
    else
        game.Lighting.Ambient = Color3.new(0.5, 0.5, 0.5)
        game.Lighting.Brightness = 1
        Window:Notify("夜视模式", "夜视模式已关闭")
    end
end)

MiscTab:CreateSection("工具功能")
MiscTab:CreateButton("清理场景", function()
    Window:Notify("清理场景", "开始清理无用物体...")
end)

MiscTab:CreateButton("显示隐藏物品", function()
    Window:Notify("显示隐藏物品", "显示所有隐藏物品...")
end)

-- 初始化
if Humanoid then
    Humanoid.WalkSpeed = originalWalkSpeed
    Humanoid.JumpPower = originalJumpPower
end

-- 添加脚本加载完成提示
Window:Notify("脚本加载完成", "穷小子打工记脚本已完全加载!")

print("穷小子打工记脚本完全加载完成! 按RightShift打开菜单")
