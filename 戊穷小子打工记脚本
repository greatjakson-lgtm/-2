-- 加载 WindUI 主库
local WindUI = loadstring(game:HttpGet("https://raw.githubusercontent.com/Footagesus/WindUI/main/dist/main.lua"))()

local Confirmed = false

WindUI:Popup({
    Title = " 穷小子打工记脚本",
    Icon = "rbxassetid://129260712070622",
    IconThemed = true,
    Content = "By: 脚本作者\nQQ群: 912837219 欢迎使用",
    Buttons = {
        {
            Title = "进入脚本。",
            Icon = "arrow-right",
            Callback = function() Confirmed = true end,
            Variant = "Primary",
        }
    }
})

repeat wait() until Confirmed

-- 创建主窗口
local Window = WindUI:CreateWindow({
    Title = "穷小子打工记脚本",
    Icon = "rbxassetid://129260712070622",
    IconThemed = true,
    Author = "感谢游玩",
    Folder = "穷小子打工记",
    Size = UDim2.fromOffset(600, 450),
    Transparent = true,
    Theme = "Dark",
    User = { Enabled = true },
    SideBarWidth = 200,
    ScrollBarEnabled = true,
})

Window:Tag({
    Title = "v2.0",
    Color = Color3.fromHex("#30ff6a")
})
Window:Tag({
    Title = "功能齐全", 
    Color = Color3.fromHex("#315dff")
})
Window:Tag({
    Title = "by开发者",
    Color = Color3.fromHex("#000000")
})

-- 创建指定的大类（作为标签页）
local Tabs = {
    Main = Window:Tab({ Title = "主要功能", Icon = "home" }),
    Teleport = Window:Tab({ Title = "传送功能", Icon = "map-pin" }),
    Automation = Window:Tab({ Title = "自动化", Icon = "settings" }),
    SavedLocations = Window:Tab({ Title = "位置保存", Icon = "bookmark" }),
    PlayerSettings = Window:Tab({ Title = "玩家设置", Icon = "user" }),
    Misc = Window:Tab({ Title = "其他功能", Icon = "star" }),
}

Window:SelectTab(1)

-- 全局服务引用
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local HttpService = game:GetService("HttpService")
local RunService = game:GetService("RunService")
local ProximityPromptService = game:GetService("ProximityPromptService")

-- 本地玩家引用
local LP = Players.LocalPlayer
local Character = LP.Character or LP.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")

-- 位置定义
local Locations = {
    ["矿场"] = CFrame.new(100, 50, 100),
    ["汽车店"] = CFrame.new(-200, 10, 50),
    ["彩票店"] = CFrame.new(150, 10, -100),
    ["办公楼"] = CFrame.new(-100, 20, 200),
    ["河岸"] = CFrame.new(300, 5, -50),
    ["正新鸡排"] = CFrame.new(80, 15, -180)
}

-- 保存的位置数据
local SavedLocations = {}

-- 功能状态
local Features = {
    AutoMine = false,
    AutoDocument = false,
    AutoEat = false,
    AutoFish = false,
    InstantInteract = false
}

-- 自动功能循环
local autoLoops = {}

-- 主要功能选项卡
Tabs.Main:Section({Title = "玩家信息"})
local moneyLabel = Tabs.Main:Label({Title = "金钱: 加载中..."})
local positionLabel = Tabs.Main:Label({Title = "位置: 未知"})

-- 更新玩家信息
local function updatePlayerInfo()
    local success, money = pcall(function()
        return LP:FindFirstChild("Money") and LP.Money.Value or 0
    end)
    
    if success then
        moneyLabel:Set("金钱: $" .. money)
    else
        moneyLabel:Set("金钱: 无法获取")
    end
    
    -- 更新位置信息
    if Character and Character.PrimaryPart then
        local pos = Character.PrimaryPart.Position
        positionLabel:Set(string.format("位置: X:%.1f Y:%.1f Z:%.1f", pos.X, pos.Y, pos.Z))
    end
end

-- 每3秒更新一次玩家信息
spawn(function()
    while true do
        updatePlayerInfo()
        wait(3)
    end
end)

Tabs.Main:Section({Title = "快速操作"})
Tabs.Main:Button({
    Title = "快速赚钱",
    Callback = function()
        Window:Notify({Title = "快速赚钱", Content = "开始执行快速赚钱任务...", Duration = 3})
    end
})

Tabs.Main:Button({
    Title = "一键升级",
    Callback = function()
        Window:Notify({Title = "一键升级", Content = "开始执行升级任务...", Duration = 3})
    end
})

-- 传送功能选项卡
Tabs.Teleport:Section({Title = "地点传送"})
for name, cf in pairs(Locations) do
    Tabs.Teleport:Button({
        Title = name,
        Callback = function()
            if Character and Character.PrimaryPart then
                Character:SetPrimaryPartCFrame(cf)
                Window:Notify({Title = "传送成功", Content = "已传送到: " .. name, Duration = 3})
            else
                Window:Notify({Title = "传送失败", Content = "角色未加载完成", Duration = 3})
            end
        end
    })
end

Tabs.Teleport:Section({Title = "特殊传送"})
Tabs.Teleport:Button({
    Title = "传送到最高点",
    Callback = function()
        if Character and Character.PrimaryPart then
            local highestPart = Workspace:FindFirstChildOfClass("Part")
            if highestPart then
                Character:SetPrimaryPartCFrame(CFrame.new(highestPart.Position + Vector3.new(0, 50, 0)))
                Window:Notify({Title = "传送成功", Content = "已传送到最高点", Duration = 3})
            end
        end
    end
})

-- 自动化选项卡
Tabs.Automation:Section({Title = "工作自动化"})

Tabs.Automation:Toggle({
    Title = "自动挖矿",
    Default = false,
    Callback = function(value)
        Features.AutoMine = value
        if value then
            Window:Notify({Title = "自动挖矿", Content = "自动挖矿已开启", Duration = 3})
            if autoLoops.AutoMine then autoLoops.AutoMine:Disconnect() end
            autoLoops.AutoMine = RunService.Heartbeat:Connect(function()
                if Features.AutoMine and Character and Character.PrimaryPart then
                    local miningSpot = Workspace:FindFirstChild("MiningSpot") or Workspace:FindFirstChild("Rock")
                    if miningSpot then
                        Character:SetPrimaryPartCFrame(miningSpot.CFrame + Vector3.new(0, 0, -5))
                    end
                end
            end)
        else
            if autoLoops.AutoMine then
                autoLoops.AutoMine:Disconnect()
                autoLoops.AutoMine = nil
            end
            Window:Notify({Title = "自动挖矿", Content = "自动挖矿已关闭", Duration = 3})
        end
    end
})

Tabs.Automation:Toggle({
    Title = "自动做文档",
    Default = false,
    Callback = function(value)
        Features.AutoDocument = value
        if value then
            Window:Notify({Title = "自动文档", Content = "自动文档处理已开启", Duration = 3})
            if autoLoops.AutoDocument then autoLoops.AutoDocument:Disconnect() end
            autoLoops.AutoDocument = RunService.Heartbeat:Connect(function()
                if Features.AutoDocument and Character and Character.PrimaryPart then
                    local officeDesk = Workspace:FindFirstChild("OfficeDesk") or Workspace:FindFirstChild("Desk")
                    if officeDesk then
                        Character:SetPrimaryPartCFrame(officeDesk.CFrame + Vector3.new(0, 0, -3))
                    end
                end
            end)
        else
            if autoLoops.AutoDocument then
                autoLoops.AutoDocument:Disconnect()
                autoLoops.AutoDocument = nil
            end
            Window:Notify({Title = "自动文档", Content = "自动文档处理已关闭", Duration = 3})
        end
    end
})

Tabs.Automation:Toggle({
    Title = "自动钓鱼",
    Default = false,
    Callback = function(value)
        Features.AutoFish = value
        if value then
            Window:Notify({Title = "自动钓鱼", Content = "自动钓鱼已开启", Duration = 3})
            if autoLoops.AutoFish then autoLoops.AutoFish:Disconnect() end
            autoLoops.AutoFish = RunService.Heartbeat:Connect(function()
                if Features.AutoFish and Character and Character.PrimaryPart then
                    local fishingSpot = Workspace:FindFirstChild("FishingSpot") or Workspace:FindFirstChild("River")
                    if fishingSpot then
                        Character:SetPrimaryPartCFrame(fishingSpot.CFrame + Vector3.new(0, 0, -3))
                    end
                end
            end)
        else
            if autoLoops.AutoFish then
                autoLoops.AutoFish:Disconnect()
                autoLoops.AutoFish = nil
            end
            Window:Notify({Title = "自动钓鱼", Content = "自动钓鱼已关闭", Duration = 3})
        end
    end
})

Tabs.Automation:Section({Title = "生存自动化"})
Tabs.Automation:Toggle({
    Title = "自动吃食物",
    Default = false,
    Callback = function(value)
        Features.AutoEat = value
        if value then
            Window:Notify({Title = "自动进食", Content = "自动进食已开启", Duration = 3})
            if autoLoops.AutoEat then autoLoops.AutoEat:Disconnect() end
            autoLoops.AutoEat = RunService.Heartbeat:Connect(function()
                if Features.AutoEat and Character and Character.PrimaryPart then
                    local hunger = Humanoid:FindFirstChild("Hunger") or Humanoid:FindFirstChild("Food")
                    if hunger and hunger.Value < 50 then
                        local food = Workspace:FindFirstChild("Food") or Workspace:FindFirstChild("Chicken")
                        if food then
                            Character:SetPrimaryPartCFrame(food.CFrame + Vector3.new(0, 0, -3))
                            if hunger:IsA("NumberValue") then
                                hunger.Value = math.min(hunger.Value + 10, 100)
                            end
                        end
                    end
                end
            end)
        else
            if autoLoops.AutoEat then
                autoLoops.AutoEat:Disconnect()
                autoLoops.AutoEat = nil
            end
            Window:Notify({Title = "自动进食", Content = "自动进食已关闭", Duration = 3})
        end
    end
})

-- 位置保存选项卡
Tabs.SavedLocations:Section({Title = "保存当前位置"})
local locationNameInput = Tabs.SavedLocations:Textbox({
    Title = "位置名称",
    Placeholder = "输入位置名称",
    Callback = function(value) end
})

Tabs.SavedLocations:Button({
    Title = "保存当前位置",
    Callback = function()
        local name = locationNameInput:Get() or "未命名位置"
        if name == "" then name = "未命名位置" end
        
        if Character and Character.PrimaryPart then
            SavedLocations[name] = {
                X = Character.PrimaryPart.Position.X,
                Y = Character.PrimaryPart.Position.Y,
                Z = Character.PrimaryPart.Position.Z
            }
            Window:Notify({Title = "位置已保存", Content = "已保存位置: " .. name, Duration = 3})
        else
            Window:Notify({Title = "保存失败", Content = "无法获取角色位置", Duration = 3})
        end
    end
})

Tabs.SavedLocations:Section({Title = "已保存的位置"})
local savedLocationsContainer = Tabs.SavedLocations:Folder({Title = "我的位置"})

-- 创建保存的位置列表
local function CreateSavedLocationsList()
    savedLocationsContainer:Clear()
    
    if next(SavedLocations) == nil then
        savedLocationsContainer:Label({Title = "暂无保存的位置"})
        return
    end
    
    for name, pos in pairs(SavedLocations) do
        savedLocationsContainer:Button({
            Title = name,
            Callback = function()
                local cf = CFrame.new(pos.X, pos.Y, pos.Z)
                if Character and Character.PrimaryPart then
                    Character:SetPrimaryPartCFrame(cf)
                    Window:Notify({Title = "传送成功", Content = "已传送到保存的位置: " .. name, Duration = 3})
                end
            end
        })
    end
end

-- 初始化保存的位置列表
CreateSavedLocationsList()

-- 玩家设置选项卡
Tabs.PlayerSettings:Section({Title = "移动设置"})
local originalWalkSpeed = 16
local originalJumpPower = 50

Tabs.PlayerSettings:Slider({
    Title = "移动速度",
    Min = 16,
    Max = 100,
    Default = 16,
    Callback = function(value)
        if Humanoid then
            Humanoid.WalkSpeed = value
            Window:Notify({Title = "移动速度", Content = "移动速度已设置为: " .. value, Duration = 3})
        end
    end
})

Tabs.PlayerSettings:Slider({
    Title = "跳跃高度",
    Min = 50,
    Max = 200,
    Default = 50,
    Callback = function(value)
        if Humanoid then
            Humanoid.JumpPower = value
            Window:Notify({Title = "跳跃高度", Content = "跳跃高度已设置为: " .. value, Duration = 3})
        end
    end
})

Tabs.PlayerSettings:Button({
    Title = "重置移动设置",
    Callback = function()
        if Humanoid then
            Humanoid.WalkSpeed = originalWalkSpeed
            Humanoid.JumpPower = originalJumpPower
            Window:Notify({Title = "移动设置", Content = "移动设置已重置", Duration = 3})
        end
    end
})

-- 其他功能选项卡
Tabs.Misc:Section({Title = "互动设置"})
Tabs.Misc:Toggle({
    Title = "瞬间互动",
    Default = false,
    Callback = function(value)
        Features.InstantInteract = value
        if value then
            if autoLoops.InstantInteract then autoLoops.InstantInteract:Disconnect() end
            autoLoops.InstantInteract = ProximityPromptService.PromptButtonHoldBegan:Connect(function(prompt)
                prompt.HoldDuration = 0
            end)
            Window:Notify({Title = "瞬间互动", Content = "瞬间互动已开启", Duration = 3})
        else
            if autoLoops.InstantInteract then
                autoLoops.InstantInteract:Disconnect()
                autoLoops.InstantInteract = nil
            end
            Window:Notify({Title = "瞬间互动", Content = "瞬间互动已关闭", Duration = 3})
        end
    end
})

Tabs.Misc:Section({Title = "视觉设置"})
Tabs.Misc:Toggle({
    Title = "夜视模式",
    Default = false,
    Callback = function(value)
        if value then
            game.Lighting.Ambient = Color3.new(1, 1, 1)
            game.Lighting.Brightness = 2
            Window:Notify({Title = "夜视模式", Content = "夜视模式已开启", Duration = 3})
        else
            game.Lighting.Ambient = Color3.new(0.5, 0.5, 0.5)
            game.Lighting.Brightness = 1
            Window:Notify({Title = "夜视模式", Content = "夜视模式已关闭", Duration = 3})
        end
    end
})

-- 初始化
if Humanoid then
    Humanoid.WalkSpeed = originalWalkSpeed
    Humanoid.JumpPower = originalJumpPower
end

-- 添加脚本加载完成提示
Window:Notify({Title = "脚本加载完成", Content = "穷小子打工记脚本已完全加载!\n按RightShift打开菜单", Duration = 5})

print("穷小子打工记脚本完全加载完成! ")
