local WindUI = loadstring(game:HttpGet("https://raw.githubusercontent.com/Footagesus/WindUI/main/dist/main.lua"))()

local Confirmed = false

WindUI:Popup({
    Title = " Script",
    Icon = "rbxassetid://129260712070622",
    IconThemed = true,
    Content = "By: \nQQ: 912837219 ",
    Buttons = {
        {
            Title = "Enter.",
            Icon = "arrow-right",
            Callback = function() Confirmed = true end,
            Variant = "Primary",
        }
    }
})

repeat wait() until Confirmed

local Window = WindUI:CreateWindow({
    Title = "Script",
    Icon = "rbxassetid://129260712070622",
    IconThemed = true,
    Author = "Thanks for playing",
    Folder = "Game",
    Size = UDim2.fromOffset(600, 450),
    Transparent = true,
    Theme = "Dark",
    User = { Enabled = true },
    SideBarWidth = 200,
    ScrollBarEnabled = true,
})

Window:Tag({
    Title = "v2.0",
    Color = Color3.fromHex("#30ff6a")
})
Window:Tag({
    Title = "Features", 
    Color = Color3.fromHex("#315dff")
})
Window:Tag({
    Title = "by Dev",
    Color = Color3.fromHex("#000000")
})

local Tabs = {
    Main = Window:CreateTab("Main", "home"),
    Teleport = Window:CreateTab("Teleport", "map-pin"),
    Automation = Window:CreateTab("Auto", "settings"),
    SavedLocations = Window:CreateTab("Saved", "bookmark"),
    PlayerSettings = Window:CreateTab("Player", "user"),
    Misc = Window:CreateTab("Misc", "star"),
}

Window:SelectTab(1)

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local HttpService = game:GetService("HttpService")
local RunService = game:GetService("RunService")
local ProximityPromptService = game:GetService("ProximityPromptService")
local TweenService = game:GetService("TweenService")

local LP = Players.LocalPlayer
local Character = LP.Character or LP.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")

local Locations = {
    ["Mine"] = CFrame.new(100, 50, 100),
    ["CarShop"] = CFrame.new(-200, 10, 50),
    ["Lottery"] = CFrame.new(150, 10, -100),
    ["Office"] = CFrame.new(-100, 20, 200),
    ["River"] = CFrame.new(300, 5, -50),
    ["Chicken"] = CFrame.new(80, 15, -180),
    ["Shop"] = CFrame.new(-50, 5, 150),
    ["Bank"] = CFrame.new(200, 10, -80),
    ["Restaurant"] = CFrame.new(-120, 5, -200),
    ["Park"] = CFrame.new(250, 20, 100)
}

local SavedLocations = {}
local locationFileName = "SavedLocations.json"

local Features = {
    AutoMine = false,
    AutoDocument = false,
    AutoEat = false,
    AutoFish = false,
    InstantInteract = false,
    SpeedHack = false,
    NoClip = false,
    GodMode = false
}

local autoLoops = {}

local function LoadSavedLocations()
    local success, data = pcall(function()
        if readfile and isfile and isfile(locationFileName) then
            return HttpService:JSONDecode(readfile(locationFileName))
        end
        return {}
    end)
    
    if success then
        SavedLocations = data
    else
        SavedLocations = {}
    end
end

local function SaveLocationsToFile()
    local success, err = pcall(function()
        if writefile then
            writefile(locationFileName, HttpService:JSONEncode(SavedLocations))
        end
    end)
    
    if not success then
        WindUI:Notify("Save Error", "Failed to save: " .. tostring(err), 3)
    end
end

LoadSavedLocations()

Tabs.Main:CreateSection("Player Info")
local moneyLabel = Tabs.Main:CreateLabel("Money: Loading...")
local levelLabel = Tabs.Main:CreateLabel("Level: 1")
local positionLabel = Tabs.Main:CreateLabel("Position: Unknown")

local function updatePlayerInfo()
    local success, money = pcall(function()
        return LP:FindFirstChild("Money") and LP.Money.Value or 0
    end)
    
    if success then
        moneyLabel:Set("Money: $" .. money)
    else
        moneyLabel:Set("Money: N/A")
    end
    
    if Character and Character.PrimaryPart then
        local pos = Character.PrimaryPart.Position
        positionLabel:Set(string.format("Position: X:%.1f Y:%.1f Z:%.1f", pos.X, pos.Y, pos.Z))
    end
end

spawn(function()
    while true do
        updatePlayerInfo()
        wait(3)
    end
end)

Tabs.Main:CreateSection("Quick Actions")
Tabs.Main:CreateButton("Fast Money", function()
    WindUI:Notify("Fast Money", "Starting money task...", 3)
end)

Tabs.Main:CreateButton("Quick Level", function()
    WindUI:Notify("Quick Level", "Starting level task...", 3)
end)

Tabs.Teleport:CreateSection("Location Teleport")
for name, cf in pairs(Locations) do
    Tabs.Teleport:CreateButton(name, function()
        if Character and Character.PrimaryPart then
            Character:SetPrimaryPartCFrame(cf)
            WindUI:Notify("Teleport", "Teleported to: " .. name, 3)
        else
            WindUI:Notify("Error", "Character not loaded", 3)
        end
    end)
end

Tabs.Teleport:CreateSection("Special Teleport")
Tabs.Teleport:CreateButton("Highest Point", function()
    if Character and Character.PrimaryPart then
        local highestPart = Workspace:FindFirstChildOfClass("Part")
        if highestPart then
            Character:SetPrimaryPartCFrame(CFrame.new(highestPart.Position + Vector3.new(0, 50, 0)))
            WindUI:Notify("Teleport", "Teleported to highest point", 3)
        end
    end
end)

Tabs.Teleport:CreateButton("Hidden Area", function()
    WindUI:Notify("Search", "Looking for hidden area...", 3)
end)

Tabs.Automation:CreateSection("Work Automation")

Tabs.Automation:CreateToggle("Auto Mine", false, function(value)
    Features.AutoMine = value
    if value then
        WindUI:Notify("Auto Mine", "Enabled", 3)
        if autoLoops.AutoMine then autoLoops.AutoMine:Disconnect() end
        autoLoops.AutoMine = RunService.Heartbeat:Connect(function()
            if Features.AutoMine and Character and Character.PrimaryPart then
                local miningSpot = Workspace:FindFirstChild("MiningSpot") or Workspace:FindFirstChild("Rock")
                if miningSpot then
                    Character:SetPrimaryPartCFrame(miningSpot.CFrame + Vector3.new(0, 0, -5))
                end
            end
        end)
    else
        if autoLoops.AutoMine then
            autoLoops.AutoMine:Disconnect()
            autoLoops.AutoMine = nil
        end
        WindUI:Notify("Auto Mine", "Disabled", 3)
    end
end)

Tabs.Automation:CreateToggle("Auto Document", false, function(value)
    Features.AutoDocument = value
    if value then
        WindUI:Notify("Auto Document", "Enabled", 3)
        if autoLoops.AutoDocument then autoLoops.AutoDocument:Disconnect() end
        autoLoops.AutoDocument = RunService.Heartbeat:Connect(function()
            if Features.AutoDocument and Character and Character.PrimaryPart then
                local officeDesk = Workspace:FindFirstChild("OfficeDesk") or Workspace:FindFirstChild("Desk")
                if officeDesk then
                    Character:SetPrimaryPartCFrame(officeDesk.CFrame + Vector3.new(0, 0, -3))
                end
            end
        end)
    else
        if autoLoops.AutoDocument then
            autoLoops.AutoDocument:Disconnect()
            autoLoops.AutoDocument = nil
        end
        WindUI:Notify("Auto Document", "Disabled", 3)
    end
end)

Tabs.Automation:CreateToggle("Auto Fish", false, function(value)
    Features.AutoFish = value
    if value then
        WindUI:Notify("Auto Fish", "Enabled", 3)
        if autoLoops.AutoFish then autoLoops.AutoFish:Disconnect() end
        autoLoops.AutoFish = RunService.Heartbeat:Connect(function()
            if Features.AutoFish and Character and Character.PrimaryPart then
                local fishingSpot = Workspace:FindFirstChild("FishingSpot") or Workspace:FindFirstChild("River")
                if fishingSpot then
                    Character:SetPrimaryPartCFrame(fishingSpot.CFrame + Vector3.new(0, 0, -3))
                end
            end
        end)
    else
        if autoLoops.AutoFish then
            autoLoops.AutoFish:Disconnect()
            autoLoops.AutoFish = nil
        end
        WindUI:Notify("Auto Fish", "Disabled", 3)
    end
end)

Tabs.Automation:CreateSection("Survival Automation")
Tabs.Automation:CreateToggle("Auto Eat", false, function(value)
    Features.AutoEat = value
    if value then
        WindUI:Notify("Auto Eat", "Enabled", 3)
        if autoLoops.AutoEat then autoLoops.AutoEat:Disconnect() end
        autoLoops.AutoEat = RunService.Heartbeat:Connect(function()
            if Features.AutoEat and Character and Character.PrimaryPart then
                local hunger = Humanoid:FindFirstChild("Hunger") or Humanoid:FindFirstChild("Food")
                if hunger and hunger.Value < 50 then
                    local food = Workspace:FindFirstChild("Food") or Workspace:FindFirstChild("Chicken")
                    if food then
                        Character:SetPrimaryPartCFrame(food.CFrame + Vector3.new(0, 0, -3))
                        if hunger:IsA("NumberValue") then
                            hunger.Value = math.min(hunger.Value + 10, 100)
                        end
                    end
                end
            end
        end)
    else
        if autoLoops.AutoEat then
            autoLoops.AutoEat:Disconnect()
            autoLoops.AutoEat = nil
        end
        WindUI:Notify("Auto Eat", "Disabled", 3)
    end
end)

Tabs.SavedLocations:CreateSection("Save Current")
local locationNameInput = Tabs.SavedLocations:CreateTextBox("Location Name", "Enter name", function(value) end)

Tabs.SavedLocations:CreateButton("Save Location", function()
    local name = locationNameInput:Get() or "Unnamed"
    if name == "" then name = "Unnamed" end
    
    if Character and Character.PrimaryPart then
        SavedLocations[name] = {
            X = Character.PrimaryPart.Position.X,
            Y = Character.PrimaryPart.Position.Y,
            Z = Character.PrimaryPart.Position.Z
        }
        SaveLocationsToFile()
        WindUI:Notify("Saved", "Saved: " .. name, 3)
        CreateSavedLocationsList()
    else
        WindUI:Notify("Error", "Cannot get position", 3)
    end
end)

Tabs.SavedLocations:CreateSection("Saved Locations")
local savedLocationsContainer = Tabs.SavedLocations:CreateFolder("My Locations")

local function CreateSavedLocationsList()
    savedLocationsContainer:Clear()
    
    if next(SavedLocations) == nil then
        savedLocationsContainer:CreateLabel("No saved locations")
        return
    end
    
    for name, pos in pairs(SavedLocations) do
        savedLocationsContainer:CreateButton(name, function()
            local cf = CFrame.new(pos.X, pos.Y, pos.Z)
            if Character and Character.PrimaryPart then
                Character:SetPrimaryPartCFrame(cf)
                WindUI:Notify("Teleport", "Teleported to: " .. name, 3)
            end
        end)
        
        savedLocationsContainer:CreateButton("Delete " .. name, function()
            SavedLocations[name] = nil
            SaveLocationsToFile()
            WindUI:Notify("Deleted", "Deleted: " .. name, 3)
            CreateSavedLocationsList()
        end)
    end
end

CreateSavedLocationsList()

Tabs.PlayerSettings:CreateSection("Movement")
local originalWalkSpeed = 16
local originalJumpPower = 50

Tabs.PlayerSettings:CreateSlider("Walk Speed", 16, 100, 16, function(value)
    if Humanoid then
        Humanoid.WalkSpeed = value
        WindUI:Notify("Speed", "Set to: " .. value, 3)
    end
end)

Tabs.PlayerSettings:CreateSlider("Jump Power", 50, 200, 50, function(value)
    if Humanoid then
        Humanoid.JumpPower = value
        WindUI:Notify("Jump", "Set to: " .. value, 3)
    end
end)

Tabs.PlayerSettings:CreateButton("Reset Movement", function()
    if Humanoid then
        Humanoid.WalkSpeed = originalWalkSpeed
        Humanoid.JumpPower = originalJumpPower
        WindUI:Notify("Reset", "Movement reset", 3)
    end
end)

Tabs.PlayerSettings:CreateSection("Abilities")
Tabs.PlayerSettings:CreateToggle("Infinite Jump", false, function(value)
    if value then
        if autoLoops.InfiniteJump then autoLoops.InfiniteJump:Disconnect() end
        autoLoops.InfiniteJump = RunService.Heartbeat:Connect(function()
            if Humanoid and Humanoid:GetState() == Enum.HumanoidStateType.Falling then
                Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
            end
        end)
        WindUI:Notify("Infinite Jump", "Enabled", 3)
    else
        if autoLoops.InfiniteJump then
            autoLoops.InfiniteJump:Disconnect()
            autoLoops.InfiniteJump = nil
        end
        WindUI:Notify("Infinite Jump", "Disabled", 3)
    end
end)

Tabs.PlayerSettings:CreateToggle("NoClip", false, function(value)
    Features.NoClip = value
    if value then
        if autoLoops.NoClip then autoLoops.NoClip:Disconnect() end
        autoLoops.NoClip = RunService.Stepped:Connect(function()
            if Character then
                for _, part in ipairs(Character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = false
                    end
                end
            end
        end)
        WindUI:Notify("NoClip", "Enabled", 3)
    else
        if autoLoops.NoClip then
            autoLoops.NoClip:Disconnect()
            autoLoops.NoClip = nil
        end
        WindUI:Notify("NoClip", "Disabled", 3)
    end
end)

Tabs.PlayerSettings:CreateToggle("God Mode", false, function(value)
    Features.GodMode = value
    if value and Humanoid then
        Humanoid.MaxHealth = math.huge
        Humanoid.Health = math.huge
        WindUI:Notify("God Mode", "Enabled", 3)
    elseif Humanoid then
        Humanoid.MaxHealth = 100
        Humanoid.Health = 100
        WindUI:Notify("God Mode", "Disabled", 3)
    end
end)

Tabs.Misc:CreateSection("Interaction")
Tabs.Misc:CreateToggle("Instant Interact", false, function(value)
    Features.InstantInteract = value
    if value then
        if autoLoops.InstantInteract then autoLoops.InstantInteract:Disconnect() end
        autoLoops.InstantInteract = ProximityPromptService.PromptButtonHoldBegan:Connect(function(prompt)
            prompt.HoldDuration = 0
        end)
        WindUI:Notify("Instant Interact", "Enabled", 3)
    else
        if autoLoops.InstantInteract then
            autoLoops.InstantInteract:Disconnect()
            autoLoops.InstantInteract = nil
        end
        WindUI:Notify("Instant Interact", "Disabled", 3)
    end
end)

Tabs.Misc:CreateSection("Visual")
Tabs.Misc:CreateToggle("Night Vision", false, function(value)
    if value then
        game.Lighting.Ambient = Color3.new(1, 1, 1)
        game.Lighting.Brightness = 2
        WindUI:Notify("Night Vision", "Enabled", 3)
    else
        game.Lighting.Ambient = Color3.new(0.5, 0.5, 0.5)
        game.Lighting.Brightness = 1
        WindUI:Notify("Night Vision", "Disabled", 3)
    end
end)

Tabs.Misc:CreateSection("Tools")
Tabs.Misc:CreateButton("Cleanup", function()
    WindUI:Notify("Cleanup", "Cleaning...", 3)
end)

Tabs.Misc:CreateButton("Show Hidden", function()
    WindUI:Notify("Show Hidden", "Showing hidden items...", 3)
end)

if Humanoid then
    Humanoid.WalkSpeed = originalWalkSpeed
    Humanoid.JumpPower = originalJumpPower
end

WindUI:Notify("Script Loaded", "Script fully loaded!\nAll features available!", 5)

print("Script fully loaded! All features available!")
