local WindUI = loadstring(game:HttpGet("https://raw.githubusercontent.com/Footagesus/WindUI/main/dist/main.lua"))()

local Confirmed = false

WindUI:Popup({
    Title = "Doors 辅助脚本",
    Icon = "rbxassetid://129260712070622",
    IconThemed = true,
    Content = "Doors多功能辅助工具\n包含透视、自动互动、速度修改等功能",
    Buttons = {
        {
            Title = "进入脚本",
            Icon = "arrow-right",
            Callback = function() Confirmed = true end,
            Variant = "Primary",
        }
    }
})

repeat wait() until Confirmed

local Window = WindUI:CreateWindow({
    Title = "Doors 辅助工具",
    Icon = "rbxassetid://129260712070622",
    IconThemed = true,
    Author = "多功能脚本",
    Folder = "DoorsScript",
    Size = UDim2.fromOffset(600, 500),
    Transparent = true,
    Theme = "Dark",
    User = { Enabled = true },
    SideBarWidth = 200,
    ScrollBarEnabled = true,
})

Window:Tag({
    Title = "v4.0",
    Color = Color3.fromHex("#30ff6a")
})
Window:Tag({
    Title = "Doors", 
    Color = Color3.fromHex("#315dff")
})

local Tabs = {
    Main = Window:Tab({ Title = "主要功能", Icon = "zap" }),
    ESP = Window:Tab({ Title = "透视功能", Icon = "eye" }),
    Auto = Window:Tab({ Title = "自动功能", Icon = "refresh-cw" }),
    Player = Window:Tab({ Title = "玩家修改", Icon = "user" }),
    Misc = Window:Tab({ Title = "其他功能", Icon = "settings" }),
    Debug = Window:Tab({ Title = "调试修复", Icon = "wrench" }),
}

Window:SelectTab(1)

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local ProximityPromptService = game:GetService("ProximityPromptService")
local TweenService = game:GetService("TweenService")
local HttpService = game:GetService("HttpService")

local LP = Players.LocalPlayer
local Character = LP.Character or LP.CharacterAdded:Wait()

-- 修复的透视系统
local ESPDebugMode = false
local ESPObjects = {
    Doors = {},
    Players = {},
    Entities = {},
    Items = {},
    Coins = {}
}

-- 自动互动系统
local AutoCollectEnabled = false
local AutoCollectCoins = false
local AutoCollectItems = false
local AutoCollectDistance = 20
local AutoCollectInterval = 0.5

-- 速度修改系统（高级绕过检测）
local SpeedHackEnabled = false
local OriginalWalkSpeed = 16
local CurrentWalkSpeed = 25
local SpeedBypassMethod = "AdvancedCFrame" -- "BodyVelocity", "CFrame", "Tween", "AdvancedCFrame"
local SpeedBypassObjects = {}
local LastSpeedUpdate = 0

-- 自动躲避功能
local AutoAvoidEnabled = false

-- 透视颜色设置
local ESP_SafeColor = Color3.fromRGB(0, 255, 0)
local ESP_DangerColor = Color3.fromRGB(255, 0, 0)
local ESP_PlayerColor = Color3.fromRGB(0, 162, 255)
local ESP_EntityColor = Color3.fromRGB(255, 0, 0)
local ESP_ItemColor = Color3.fromRGB(0, 255, 0)
local ESP_CoinColor = Color3.fromRGB(255, 255, 0)

-- 改进的对象识别系统（针对Doors游戏优化）
local ObjectIdentifier = {
    -- 门识别（Doors特定）
    isDoor = function(obj)
        if not obj:IsA("BasePart") and not obj:IsA("Model") then return false end
        
        local name = obj.Name:lower()
        local parentName = obj.Parent and obj.Parent.Name:lower() or ""
        
        -- Doors游戏特定的门识别
        local isDoor = name:find("door") or name:find("gate") or 
                      name:find("entrance") or name:find("exit") or
                      parentName:find("door") or parentName:find("gate")
        
        if obj:IsA("Model") then
            -- 检查门的特征组件
            local hasHinge = obj:FindFirstChild("Hinge") or obj:FindFirstChild("HingeConstraint")
            local hasHandle = obj:FindFirstChild("Handle") or obj:FindFirstChild("Knob") or obj:FindFirstChild("TouchInterest")
            local hasClickDetector = obj:FindFirstChildOfClass("ClickDetector")
            
            return isDoor or (hasHinge and hasHandle) or hasClickDetector
        end
        
        return isDoor
    end,
    
    -- 实体识别（Doors怪物）
    isEntity = function(obj)
        if not obj:IsA("Model") then return false end
        
        local name = obj.Name:lower()
        
        -- Doors游戏特定的实体名称
        local entityNames = {
            "seek", "rush", "figure", "screech", "ambush", "halt", 
            "eyes", "timothy", "jack", "glitch", "hide", "elude"
        }
        
        for _, entityName in ipairs(entityNames) do
            if name:find(entityName) then return true end
        end
        
        -- 检查实体特征
        local hasHumanoid = obj:FindFirstChildOfClass("Humanoid")
        local hasHead = obj:FindFirstChild("Head")
        local isMoving = hasHumanoid and hasHumanoid.MoveDirection.Magnitude > 0
        
        return hasHumanoid and hasHead and not Players:GetPlayerFromCharacter(obj) and isMoving
    end,
    
    -- 可收集物品识别（Doors道具）
    isCollectibleItem = function(obj)
        if not obj:IsA("BasePart") and not obj:IsA("Model") then return false end
        
        local name = obj.Name:lower()
        
        -- Doors游戏特定的物品
        local itemNames = {
            "key", "lockpick", "medkit", "flashlight", "vitamin", "book",
            "lever", "crank", "battery", "fuel", "gear", "tool"
        }
        
        for _, itemName in ipairs(itemNames) do
            if name:find(itemName) then return true end
        end
        
        -- 检查是否有可交互的提示或特效
        local hasPrompt = obj:FindFirstChildWhichIsA("ProximityPrompt")
        local hasSparkles = obj:FindFirstChild("Sparkles") or obj:FindFirstChild("PointLight")
        local isGlowing = obj:IsA("BasePart") and obj.Material == EnumMaterial.Neon
        
        return hasPrompt or hasSparkles or isGlowing
    end,
    
    -- 金币识别（Doors游戏内货币）
    isCoin = function(obj)
        if not obj:IsA("BasePart") and not obj:IsA("Model") then return false end
        
        local name = obj.Name:lower()
        
        -- Doors游戏可能的货币名称
        local coinNames = {"coin", "money", "currency", "gold", "cash", "dollar", "note", "bill"}
        
        for _, coinName in ipairs(coinNames) do
            if name:find(coinName) then return true end
        end
        
        -- 检查金币特征
        if obj:IsA("BasePart") then
            local isGoldColor = obj.Color.r > 0.7 and obj.Color.g > 0.7 and obj.Color.b < 0.3
            local hasSparkle = obj:FindFirstChild("Sparkles") or obj:FindFirstChild("PointLight")
            local isShiny = obj.Material == EnumMaterial.Neon or obj.Material == EnumMaterial.Glass
            
            return isGoldColor or hasSparkle or isShiny
        end
        
        return false
    end,
    
    -- 玩家识别
    isPlayer = function(obj)
        if not obj:IsA("Model") then return false end
        local player = Players:GetPlayerFromCharacter(obj)
        return player ~= nil and player ~= LP and obj ~= LP.Character
    end
}

-- 改进的ESP创建函数（防止重复和错误）
local function createESP(obj, espType, color, text)
    if not obj or not obj.Parent then return nil end
    
    -- 生成唯一ID防止重复
    local objId = HttpService:GenerateGUID(false)
    if not obj:FindFirstChild("ESP_ID") then
        local idAttr = Instance.new("StringValue")
        idAttr.Name = "ESP_ID"
        idAttr.Value = objId
        idAttr.Parent = obj
    else
        objId = obj.ESP_ID.Value
    end
    
    -- 检查是否已存在ESP
    for _, espData in pairs(ESPObjects[espType]) do
        if espData.objectId == objId and espData.gui and espData.gui.Parent then
            return espData.gui
        end
    end
    
    local rootPart = obj:IsA("BasePart") and obj or 
                    (obj:FindFirstChild("HumanoidRootPart") or obj.PrimaryPart or obj:FindFirstChildWhichIsA("BasePart"))
    
    if not rootPart then return nil end
    
    local billboard = Instance.new("BillboardGui")
    billboard.Name = "ESP_" .. espType .. "_" .. objId
    billboard.Adornee = rootPart
    billboard.Size = UDim2.new(0, 100, 0, 40)
    billboard.StudsOffset = Vector3.new(0, 3, 0)
    billboard.AlwaysOnTop = true
    billboard.MaxDistance = 500
    billboard.Enabled = true
    billboard.Parent = rootPart
    
    local label = Instance.new("TextLabel")
    label.Text = text or espType
    label.Size = UDim2.new(1, 0, 1, 0)
    label.BackgroundTransparency = 1
    label.TextColor3 = color
    label.TextStrokeTransparency = 0.3
    label.Font = Enum.Font.GothamBold
    label.TextSize = 14
    label.Parent = billboard
    
    if ESPDebugMode then
        local debugLabel = Instance.new("TextLabel")
        debugLabel.Text = obj.Name
        debugLabel.Size = UDim2.new(1, 0, 0, 20)
        debugLabel.Position = UDim2.new(0, 0, 1, 0)
        debugLabel.BackgroundTransparency = 1
        debugLabel.TextColor3 = Color3.new(1, 1, 1)
        debugLabel.TextSize = 10
        debugLabel.Parent = billboard
    end
    
    local espData = {
        object = obj,
        objectId = objId,
        gui = billboard,
        type = espType,
        created = tick()
    }
    
    table.insert(ESPObjects[espType], espData)
    return billboard
end

-- 高级速度绕过系统
local function applySpeedBypass()
    if not SpeedHackEnabled or not Character then return end
    
    local humanoid = Character:FindFirstChildOfClass("Humanoid")
    local humanoidRootPart = Character:FindFirstChild("HumanoidRootPart")
    
    if not humanoid or not humanoidRootPart then return end
    
    -- 清除旧的绕过对象
    for _, obj in ipairs(SpeedBypassObjects) do
        if obj and (obj.Parent or typeof(obj) == "RBXScriptConnection") then
            if typeof(obj) == "RBXScriptConnection" then
                obj:Disconnect()
            else
                obj:Destroy()
            end
        end
    end
    SpeedBypassObjects = {}
    
    -- 保存原始速度
    OriginalWalkSpeed = humanoid.WalkSpeed
    
    if SpeedBypassMethod == "BodyVelocity" then
        -- 方法1: BodyVelocity（中等隐蔽性）
        local bodyVelocity = Instance.new("BodyVelocity")
        bodyVelocity.Velocity = humanoidRootPart.CFrame.LookVector * CurrentWalkSpeed
        bodyVelocity.MaxForce = Vector3.new(4000, 0, 4000)
        bodyVelocity.P = 1250
        bodyVelocity.Name = "WindUI_SpeedBypass"
        bodyVelocity.Parent = humanoidRootPart
        table.insert(SpeedBypassObjects, bodyVelocity)
        
    elseif SpeedBypassMethod == "CFrame" then
        -- 方法2: CFrame移动（高隐蔽性）
        local moveConnection
        moveConnection = RunService.Heartbeat:Connect(function()
            if not SpeedHackEnabled or not Character or not Character.Parent then
                moveConnection:Disconnect()
                return
            end
            
            local moveDirection = humanoid.MoveDirection
            if moveDirection.Magnitude > 0 then
                local newPosition = humanoidRootPart.Position + (moveDirection * CurrentWalkSpeed * 0.033)
                humanoidRootPart.CFrame = CFrame.new(newPosition, newPosition + moveDirection)
            end
        end)
        table.insert(SpeedBypassObjects, moveConnection)
        
    elseif SpeedBypassMethod == "Tween" then
        -- 方法3: TweenService（最高隐蔽性）
        local tweenInfo = TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
        local lastMoveTime = 0
        
        local tweenConnection
        tweenConnection = RunService.Heartbeat:Connect(function()
            if not SpeedHackEnabled or not Character or not Character.Parent then
                tweenConnection:Disconnect()
                return
            end
            
            local moveDirection = humanoid.MoveDirection
            if moveDirection.Magnitude > 0 and tick() - lastMoveTime > 0.1 then
                local targetPosition = humanoidRootPart.Position + (moveDirection * 5)
                local tween = TweenService:Create(humanoidRootPart, tweenInfo, {CFrame = CFrame.new(targetPosition, targetPosition + moveDirection)})
                tween:Play()
                lastMoveTime = tick()
            end
        end)
        table.insert(SpeedBypassObjects, tweenConnection)
        
    elseif SpeedBypassMethod == "AdvancedCFrame" then
        -- 方法4: 高级CFrame绕过（最先进）
        local lastPosition = humanoidRootPart.Position
        local lastUpdate = tick()
        
        local advancedConnection
        advancedConnection = RunService.Heartbeat:Connect(function()
            if not SpeedHackEnabled or not Character or not Character.Parent then
                advancedConnection:Disconnect()
                return
            end
            
            local currentTime = tick()
            local deltaTime = currentTime - lastUpdate
            lastUpdate = currentTime
            
            local moveDirection = humanoid.MoveDirection
            if moveDirection.Magnitude > 0 then
                -- 使用更自然的移动方式
                local speedMultiplier = math.random(95, 105) / 100 -- 添加随机变化
                local moveDistance = CurrentWalkSpeed * deltaTime * speedMultiplier
                
                -- 计算新位置
                local newPosition = humanoidRootPart.Position + (moveDirection * moveDistance)
                
                -- 使用更自然的移动方式，避免瞬间移动
                humanoidRootPart.CFrame = CFrame.new(newPosition, newPosition + moveDirection)
                
                -- 设置一个合理的原始速度
                if currentTime - LastSpeedUpdate > 0.5 then
                    humanoid.WalkSpeed = math.random(14, 18)
                    LastSpeedUpdate = currentTime
                end
            end
        end)
        table.insert(SpeedBypassObjects, advancedConnection)
    end
    
    -- 设置一个合理的原始速度
    humanoid.WalkSpeed = math.random(14, 18)
end

local function removeSpeedBypass()
    for _, obj in ipairs(SpeedBypassObjects) do
        if obj then
            if typeof(obj) == "RBXScriptConnection" then
                obj:Disconnect()
            elseif obj.Parent then
                obj:Destroy()
            end
        end
    end
    SpeedBypassObjects = {}
    
    if Character then
        local humanoid = Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.WalkSpeed = OriginalWalkSpeed
        end
    end
end

-- 自动互动功能
local function startAutoCollect()
    if not AutoCollectEnabled then return end
    
    local function collectObject(obj)
        if not obj or not obj.Parent then return false end
        
        local prompt = obj:FindFirstChildWhichIsA("ProximityPrompt")
        if not prompt and obj:IsA("Model") then
            for _, part in ipairs(obj:GetDescendants()) do
                if part:IsA("ProximityPrompt") then
                    prompt = part
                    break
                end
            end
        end
        
        if prompt and prompt:IsA("ProximityPrompt") then
            fireproximityprompt(prompt)
            return true
        end
        
        return false
    end
    
    while AutoCollectEnabled do
        task.wait(AutoCollectInterval)
        
        if not Character or not Character.Parent then
            Character = LP.Character or LP.CharacterAdded:Wait()
        end
        
        local humanoidRootPart = Character:FindFirstChild("HumanoidRootPart")
        if not humanoidRootPart then continue end
        
        local playerPos = humanoidRootPart.Position
        
        if AutoCollectCoins then
            for _, obj in ipairs(workspace:GetDescendants()) do
                if ObjectIdentifier.isCoin(obj) then
                    local rootPart = obj:IsA("BasePart") and obj or 
                                   (obj:FindFirstChild("HumanoidRootPart") or obj.PrimaryPart or obj:FindFirstChildWhichIsA("BasePart"))
                    if rootPart and (playerPos - rootPart.Position).Magnitude <= AutoCollectDistance then
                        collectObject(obj)
                    end
                end
            end
        end
        
        if AutoCollectItems then
            for _, obj in ipairs(workspace:GetDescendants()) do
                if ObjectIdentifier.isCollectibleItem(obj) then
                    local rootPart = obj:IsA("BasePart") and obj or 
                                   (obj:FindFirstChild("HumanoidRootPart") or obj.PrimaryPart or obj:FindFirstChildWhichIsA("BasePart"))
                    if rootPart and (playerPos - rootPart.Position).Magnitude <= AutoCollectDistance then
                        collectObject(obj)
                    end
                end
            end
        end
    end
end

-- ESP 管理函数
local function clearESP(espType)
    for _, espData in ipairs(ESPObjects[espType]) do
        if espData.gui and espData.gui.Parent then
            espData.gui:Destroy()
        end
    end
    ESPObjects[espType] = {}
end

local function clearAllESP()
    for espType, _ in pairs(ESPObjects) do
        clearESP(espType)
    end
end

local function cleanupInvalidESP()
    for espType, objects in pairs(ESPObjects) do
        for i = #objects, 1, -1 do
            local espData = objects[i]
            if not espData.object or not espData.object.Parent or not espData.gui or not espData.gui.Parent then
                if espData.gui then
                    espData.gui:Destroy()
                end
                table.remove(objects, i)
            end
        end
    end
end

-- ESP 更新函数（针对Doors游戏优化）
local function updateDoorESP()
    if not DoorESPEnabled then return end
    clearESP("Doors")
    
    for _, obj in ipairs(workspace:GetDescendants()) do
        if ObjectIdentifier.isDoor(obj) then
            local isSafe = obj.Name:lower():find("exit") or obj.Name:lower():find("safe") or obj.Name:lower():find("escape")
            local color = isSafe and ESP_SafeColor or ESP_DangerColor
            createESP(obj, "Doors", color, isSafe and "安全门" or "危险门")
        end
    end
end

local function updatePlayerESP()
    if not PlayerESPEnabled then return end
    clearESP("Players")
    
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LP and player.Character then
            createESP(player.Character, "Players", ESP_PlayerColor, player.Name)
        end
    end
end

local function updateEntityESP()
    if not EntityESPEnabled then return end
    clearESP("Entities")
    
    for _, obj in ipairs(workspace:GetDescendants()) do
        if ObjectIdentifier.isEntity(obj) then
            createESP(obj, "Entities", ESP_EntityColor, "实体")
        end
    end
end

local function updateItemESP()
    if not ItemESPEnabled then return end
    clearESP("Items")
    
    for _, obj in ipairs(workspace:GetDescendants()) do
        if ObjectIdentifier.isCollectibleItem(obj) then
            createESP(obj, "Items", ESP_ItemColor, "物品")
        end
    end
end

local function updateCoinESP()
    if not CoinESPEnabled then return end
    clearESP("Coins")
    
    for _, obj in ipairs(workspace:GetDescendants()) do
        if ObjectIdentifier.isCoin(obj) then
            createESP(obj, "Coins", ESP_CoinColor, "金币")
        end
    end
end

-- 自动更新循环
local ESPUpdateConnection
local function startESPUpdateLoop()
    if ESPUpdateConnection then
        ESPUpdateConnection:Disconnect()
    end
    
    ESPUpdateConnection = RunService.Heartbeat:Connect(function()
        cleanupInvalidESP()
        
        if DoorESPEnabled then updateDoorESP() end
        if PlayerESPEnabled then updatePlayerESP() end
        if EntityESPEnabled then updateEntityESP() end
        if ItemESPEnabled then updateItemESP() end
        if CoinESPEnabled then updateCoinESP() end
        
        task.wait(1)
    end)
end

-- 主要功能标签页
Tabs.Main:Toggle({
    Title = "门透视",
    Description = "高亮显示所有门",
    Value = false,
    Callback = function(value)
        DoorESPEnabled = value
        if value then updateDoorESP() else clearESP("Doors") end
    end
})

Tabs.Main:Colorpicker({
    Title = "安全门颜色",
    Default = Color3.fromRGB(0, 255, 0),
    Callback = function(Value)
        ESP_SafeColor = Value
        updateDoorESP()
    end
})

Tabs.Main:Colorpicker({
    Title = "危险门颜色",
    Default = Color3.fromRGB(255, 0, 0),
    Callback = function(Value)
        ESP_DangerColor = Value
        updateDoorESP()
    end
})

-- 透视功能标签页
Tabs.ESP:Toggle({
    Title = "玩家透视",
    Value = false,
    Callback = function(value)
        PlayerESPEnabled = value
        if value then updatePlayerESP() else clearESP("Players") end
    end
})

Tabs.ESP:Toggle({
    Title = "实体透视",
    Value = false,
    Callback = function(value)
        EntityESPEnabled = value
        if value then updateEntityESP() else clearESP("Entities") end
    end
})

Tabs.ESP:Toggle({
    Title = "物品透视",
    Value = false,
    Callback = function(value)
        ItemESPEnabled = value
        if value then updateItemESP() else clearESP("Items") end
    end
})

Tabs.ESP:Toggle({
    Title = "金币透视",
    Value = false,
    Callback = function(value)
        CoinESPEnabled = value
        if value then updateCoinESP() else clearESP("Coins") end
    end
})

Tabs.ESP:Colorpicker({
    Title = "玩家颜色",
    Default = Color3.fromRGB(0, 162, 255),
    Callback = function(Value)
        ESP_PlayerColor = Value
        updatePlayerESP()
    end
})

Tabs.ESP:Colorpicker({
    Title = "实体颜色",
    Default = Color3.fromRGB(255, 0, 0),
    Callback = function(Value)
        ESP_EntityColor = Value
        updateEntityESP()
    end
})

Tabs.ESP:Colorpicker({
    Title = "物品颜色",
    Default = Color3.fromRGB(0, 255, 0),
    Callback = function(Value)
        ESP_ItemColor = Value
        updateItemESP()
    end
})

Tabs.ESP:Colorpicker({
    Title = "金币颜色",
    Default = Color3.fromRGB(255, 255, 0),
    Callback = function(Value)
        ESP_CoinColor = Value
        updateCoinESP()
    end
})

-- 自动功能标签页
Tabs.Auto:Toggle({
    Title = "自动收集",
    Description = "自动收集附近的物品和金币",
    Value = false,
    Callback = function(value)
        AutoCollectEnabled = value
        if value then coroutine.wrap(startAutoCollect)() end
    end
})

Tabs.Auto:Toggle({
    Title = "收集金币",
    Description = "自动拾取附近的金币",
    Value = false,
    Callback = function(value)
        AutoCollectCoins = value
    end
})

Tabs.Auto:Toggle({
    Title = "收集物品",
    Description = "自动拾取附近的物品",
    Value = false,
    Callback = function(value)
        AutoCollectItems = value
    end
})

Tabs.Auto:Slider({
    Title = "收集距离",
    Description = "自动收集的最大距离",
    Default = 20,
    Min = 5,
    Max = 50,
    Callback = function(Value)
        AutoCollectDistance = Value
    end
})

Tabs.Auto:Slider({
    Title = "收集间隔",
    Description = "自动收集的间隔时间（秒）",
    Default = 0.5,
    Min = 0.1,
    Max = 2,
    Rounding = 1,
    Callback = function(Value)
        AutoCollectInterval = Value
    end
})

-- 玩家修改标签页
Tabs.Player:Toggle({
    Title = "速度修改",
    Description = "使用高级绕过系统修改移动速度",
    Value = false,
    Callback = function(value)
        SpeedHackEnabled = value
        if value then applySpeedBypass() else removeSpeedBypass() end
    end
})

Tabs.Player:Slider({
    Title = "移动速度",
    Description = "设置移动速度（16-100）",
    Default = 25,
    Min = 16,
    Max = 100,
    Callback = function(Value)
        CurrentWalkSpeed = Value
        if SpeedHackEnabled then
            removeSpeedBypass()
            applySpeedBypass()
        end
    end
})

Tabs.Player:Dropdown({
    Title = "绕过方法",
    Description = "选择速度绕过方法",
    Values = {"BodyVelocity", "CFrame", "Tween", "AdvancedCFrame"},
    Default = "AdvancedCFrame",
    Callback = function(Value)
        SpeedBypassMethod = Value
        if SpeedHackEnabled then
            removeSpeedBypass()
            applySpeedBypass()
        end
    end
})

-- 调试修复标签页
Tabs.Debug:Toggle({
    Title = "调试模式",
    Description = "显示对象名称和调试信息",
    Value = false,
    Callback = function(value)
        ESPDebugMode = value
        clearAllESP()
        if DoorESPEnabled then updateDoorESP() end
        if PlayerESPEnabled then updatePlayerESP() end
        if EntityESPEnabled then updateEntityESP() end
        if ItemESPEnabled then updateItemESP() end
        if CoinESPEnabled then updateCoinESP() end
    end
})

Tabs.Debug:Button({
    Title = "强制刷新ESP",
    Description = "重新扫描并创建所有ESP",
    Callback = function()
        clearAllESP()
        if DoorESPEnabled then updateDoorESP() end
        if PlayerESPEnabled then updatePlayerESP() end
        if EntityESPEnabled then updateEntityESP() end
        if ItemESPEnabled then updateItemESP() end
        if CoinESPEnabled then updateCoinESP() end
        WindUI:Notify({Title = "调试", Content = "已强制刷新所有ESP", Duration = 2})
    end
})

-- 其他功能标签页
Tabs.Misc:Button({
    Title = "清空所有ESP",
    Callback = function()
        clearAllESP()
        WindUI:Notify({Title = "提示", Content = "已清除所有ESP", Duration = 2})
    end
})

Tabs.Misc:Button({
    Title = "重置所有设置",
    Callback = function()
        DoorESPEnabled = false
        PlayerESPEnabled = false
        EntityESPEnabled = false
        ItemESPEnabled = false
        CoinESPEnabled = false
        AutoCollectEnabled = false
        SpeedHackEnabled = false
        ESPDebugMode = false
        
        clearAllESP()
        removeSpeedBypass()
        
        WindUI:Notify({Title = "提示", Content = "已重置所有设置", Duration = 2})
    end
})

-- 启动系统
startESPUpdateLoop()

WindUI:Init()
WindUI:Notify("Doors 辅助工具", "脚本已加载成功！包含修复的透视和高级速度绕过系统")
