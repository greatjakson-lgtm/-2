local WindUI = loadstring(game:HttpGet("https://raw.githubusercontent.com/Footagesus/WindUI/main/dist/main.lua"))()

local Confirmed = false

WindUI:Popup({
    Title = "戊脚本",
    Icon = "rbxassetid://129260712070622",
    IconThemed = true,
    Content = "by誓约\n",
    Buttons = {
        {
            Title = "进入脚本",
            Icon = "arrow-right",
            Callback = function() Confirmed = true end,
            Variant = "Primary",
        }
    }
})

repeat wait() until Confirmed

local Window = WindUI:CreateWindow({
    Title = "戊脚本",
    Icon = "rbxassetid://129260712070622",
    IconThemed = true,
    Author = "戊脚本",
    Folder = "DoorsScript",
    Size = UDim2.fromOffset(540, 400),
    Transparent = true,
    Theme = "Dark",
    User = { Enabled = true },
    SideBarWidth = 200,
    ScrollBarEnabled = true,
})

Window:Tag({
    Title = "v1.0",
    Color = Color3.fromHex("#30ff6a")
})
Window:Tag({
    Title = "Doors", 
    Color = Color3.fromHex("#315dff")
})

local Tabs = {
    Main = Window:Tab({ Title = "主要功能", Icon = "zap" }),
    ESP = Window:Tab({ Title = "透视功能", Icon = "eye" }),
    Auto = Window:Tab({ Title = "自动功能", Icon = "refresh-cw" }),
    Player = Window:Tab({ Title = "玩家修改", Icon = "user" }),
    Misc = Window:Tab({ Title = "其他功能", Icon = "settings" }),
}

Window:SelectTab(1)

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local LP = Players.LocalPlayer
local Character = LP.Character or LP.CharacterAdded:Wait()

-- 门透视功能
local DoorESPEnabled = false
local HighlightedDoors = {}
local ESP_SafeColor = Color3.fromRGB(0, 255, 0)
local ESP_DangerColor = Color3.fromRGB(255, 0, 0)

local function StartDoorESP()
    if not DoorESPEnabled then return end
    
    for door, highlight in pairs(HighlightedDoors) do
        if highlight then
            highlight:Destroy()
        end
    end
    HighlightedDoors = {}
    
    local function ScanForDoors()
        if not DoorESPEnabled then return end
        
        for _, obj in ipairs(workspace:GetDescendants()) do
            if obj.Name:lower():find("door") and obj:IsA("BasePart") and not HighlightedDoors[obj] then
                local highlight = Instance.new("Highlight")
                highlight.Parent = obj
                highlight.Adornee = obj
                highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
                
                if obj.Name:lower():find("exit") or obj.Name:lower():find("safe") then
                    highlight.FillColor = ESP_SafeColor
                else
                    highlight.FillColor = ESP_DangerColor
                end
                
                HighlightedDoors[obj] = highlight
            end
        end
    end
    
    ScanForDoors()
    
    while DoorESPEnabled do
        task.wait(5)
        ScanForDoors()
    end
end

local function UpdateDoorHighlights()
    for door, highlight in pairs(HighlightedDoors) do
        if highlight and door.Parent then
            if door.Name:lower():find("exit") or door.Name:lower():find("safe") then
                highlight.FillColor = ESP_SafeColor
            else
                highlight.FillColor = ESP_DangerColor
            end
        end
    end
end

-- 自动互动功能
local AutoInteractEnabled = false
local AutoInteractDistance = 10

local function StartAutoInteract()
    if not AutoInteractEnabled then return end
    
    local player = Players.LocalPlayer
    if not player then return end
    
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    
    while AutoInteractEnabled do
        task.wait(0.1)
        
        if not character or not humanoidRootPart then
            character = player.Character or player.CharacterAdded:Wait()
            humanoidRootPart = character:WaitForChild("HumanoidRootPart")
        end
        
        for _, door in ipairs(workspace:GetDescendants()) do
            if door:IsA("Model") and door.Name:lower():find("door") and door:FindFirstChild("Door") then
                local doorPart = door.Door
                if (humanoidRootPart.Position - doorPart.Position).Magnitude <= AutoInteractDistance then
                    game:GetService("VirtualInputManager"):SendKeyEvent(true, Enum.KeyCode.E, false, game)
                    task.wait(0.1)
                    game:GetService("VirtualInputManager"):SendKeyEvent(false, Enum.KeyCode.E, false, game)
                end
            end
        end
    end
end

-- 自动躲避功能
local AutoAvoidEnabled = false

local function StartAutoAvoid()
    if not AutoAvoidEnabled then return end
    
    local player = Players.LocalPlayer
    if not player then return end
    
    while AutoAvoidEnabled do
        task.wait(0.5)
        
        local character = player.Character
        if not character then continue end
        
        local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
        if not humanoidRootPart then continue end
        
        for _, entity in ipairs(workspace:GetDescendants()) do
            if entity:IsA("Model") and (entity.Name:lower():find("seek") or entity.Name:lower():find("rush") or entity.Name:lower():find("figure")) then
                local head = entity:FindFirstChild("Head")
                if head and (humanoidRootPart.Position - head.Position).Magnitude < 30 then
                    local closestHidingSpot = FindClosestHidingSpot(humanoidRootPart.Position)
                    if closestHidingSpot then
                        humanoidRootPart.CFrame = CFrame.new(closestHidingSpot.Position)
                    end
                end
            end
        end
    end
end

local function FindClosestHidingSpot(position)
    local closest = nil
    local closestDistance = math.huge
    
    for _, obj in ipairs(workspace:GetDescendants()) do
        if obj.Name:lower():find("closet") or obj.Name:lower():find("hide") or obj.Name:lower():find("bed") then
            local distance = (position - obj.Position).Magnitude
            if distance < closestDistance then
                closest = obj
                closestDistance = distance
            end
        end
    end
    
    return closest
end

-- 速度修改功能
local SpeedHackEnabled = false
local OriginalWalkSpeed = 16
local CurrentWalkSpeed = 25

local function ApplySpeedMod()
    local player = Players.LocalPlayer
    if not player then return end
    
    local character = player.Character
    if not character then
        player.CharacterAdded:Connect(function(newChar)
            character = newChar
            task.wait(1)
            SetWalkSpeed(CurrentWalkSpeed)
        end)
        return
    end
    
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        OriginalWalkSpeed = humanoid.WalkSpeed
        SetWalkSpeed(CurrentWalkSpeed or 25)
    end
end

local function SetWalkSpeed(speed)
    CurrentWalkSpeed = speed
    
    if not SpeedHackEnabled then return end
    
    local player = Players.LocalPlayer
    if not player then return end
    
    local character = player.Character
    if not character then return end
    
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.WalkSpeed = speed
    end
end

local function ResetSpeed()
    local player = Players.LocalPlayer
    if not player then return end
    
    local character = player.Character
    if not character then return end
    
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.WalkSpeed = OriginalWalkSpeed
    end
end

-- 无限跳跃功能
local InfiniteJumpEnabled = false
local InfiniteJumpConnection = nil

local function EnableInfiniteJump()
    if InfiniteJumpConnection then
        InfiniteJumpConnection:Disconnect()
    end
    
    InfiniteJumpConnection = UserInputService.JumpRequest:Connect(function()
        if InfiniteJumpEnabled then
            local player = Players.LocalPlayer
            if player and player.Character then
                local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
                if humanoid then
                    humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                end
            end
        end
    end)
end

local function DisableInfiniteJump()
    if InfiniteJumpConnection then
        InfiniteJumpConnection:Disconnect()
        InfiniteJumpConnection = nil
    end
end

-- ESP功能
local ESP_PlayerColor = Color3.fromRGB(0, 162, 255)
local ESP_EntityColor = Color3.fromRGB(255, 0, 0)
local ESP_ItemColor = Color3.fromRGB(0, 255, 0)
local ESP_CoinColor = Color3.fromRGB(255, 255, 0)

local PlayerHighlights = {}
local EntityHighlights = {}
local ItemHighlights = {}
local CoinHighlights = {}

local PlayerESPEnabled = false
local EntityESPEnabled = false
local ItemESPEnabled = false
local CoinESPEnabled = false

-- 玩家ESP
local function StartPlayerESP()
    if not PlayerESPEnabled then return end
    
    ClearPlayerESP()
    
    local function UpdatePlayerESP()
        if not PlayerESPEnabled then return end
        
        for _, player in ipairs(Players:GetPlayers()) do
            if player ~= Players.LocalPlayer and player.Character and not PlayerHighlights[player] then
                local highlight = Instance.new("Highlight")
                highlight.Parent = player.Character
                highlight.Adornee = player.Character
                highlight.FillColor = ESP_PlayerColor
                highlight.OutlineColor = ESP_PlayerColor
                highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
                
                PlayerHighlights[player] = highlight
            elseif PlayerHighlights[player] and (not player.Character or not player.Character.Parent) then
                PlayerHighlights[player]:Destroy()
                PlayerHighlights[player] = nil
            end
        end
    end
    
    UpdatePlayerESP()
    
    local conn
    conn = RunService.Heartbeat:Connect(function()
        if not PlayerESPEnabled then
            conn:Disconnect()
            return
        end
        UpdatePlayerESP()
    end)
end

local function ClearPlayerESP()
    for player, highlight in pairs(PlayerHighlights) do
        if highlight then
            highlight:Destroy()
        end
    end
    PlayerHighlights = {}
end

local function UpdatePlayerESP()
    for player, highlight in pairs(PlayerHighlights) do
        if highlight then
            highlight.FillColor = ESP_PlayerColor
            highlight.OutlineColor = ESP_PlayerColor
        end
    end
end

-- 实体ESP
local function StartEntityESP()
    if not EntityESPEnabled then return end
    
    ClearEntityESP()
    
    local function UpdateEntityESP()
        if not EntityESPEnabled then return end
        
        for _, entity in ipairs(workspace:GetDescendants()) do
            if (entity.Name:lower():find("seek") or entity.Name:lower():find("rush") or 
                entity.Name:lower():find("figure") or entity.Name:lower():find("screech") or
                entity.Name:lower():find("ambush") or entity.Name:lower():find("halt")) and
                entity:IsA("Model") and not EntityHighlights[entity] then
                
                local highlight = Instance.new("Highlight")
                highlight.Parent = entity
                highlight.Adornee = entity
                highlight.FillColor = ESP_EntityColor
                highlight.OutlineColor = ESP_EntityColor
                highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
                
                EntityHighlights[entity] = highlight
            elseif EntityHighlights[entity] and not entity.Parent then
                EntityHighlights[entity]:Destroy()
                EntityHighlights[entity] = nil
            end
        end
    end
    
    UpdateEntityESP()
    
    local conn
    conn = RunService.Heartbeat:Connect(function()
        if not EntityESPEnabled then
            conn:Disconnect()
            return
        end
        UpdateEntityESP()
    end)
end

local function ClearEntityESP()
    for entity, highlight in pairs(EntityHighlights) do
        if highlight then
            highlight:Destroy()
        end
    end
    EntityHighlights = {}
end

local function UpdateEntityESP()
    for entity, highlight in pairs(EntityHighlights) do
        if highlight then
            highlight.FillColor = ESP_EntityColor
            highlight.OutlineColor = ESP_EntityColor
        end
    end
end

-- 物品ESP
local function StartItemESP()
    if not ItemESPEnabled then return end
    
    ClearItemESP()
    
    local function UpdateItemESP()
        if not ItemESPEnabled then return end
        
        for _, item in ipairs(workspace:GetDescendants()) do
            if (item.Name:lower():find("key") or item.Name:lower():find("lockpick") or 
                item.Name:lower():find("medkit") or item.Name:lower():find("flashlight") or
                item.Name:lower():find("vitamin") or item.Name:lower():find("book")) and
                item:IsA("BasePart") and not ItemHighlights[item] then
                
                local highlight = Instance.new("Highlight")
                highlight.Parent = item
                highlight.Adornee = item
                highlight.FillColor = ESP_ItemColor
                highlight.OutlineColor = ESP_ItemColor
                highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
                
                ItemHighlights[item] = highlight
            elseif ItemHighlights[item] and not item.Parent then
                ItemHighlights[item]:Destroy()
                ItemHighlights[item] = nil
            end
        end
    end
    
    UpdateItemESP()
    
    local conn
    conn = RunService.Heartbeat:Connect(function()
        if not ItemESPEnabled then
            conn:Disconnect()
            return
        end
        UpdateItemESP()
    end)
end

local function ClearItemESP()
    for item, highlight in pairs(ItemHighlights) do
        if highlight then
            highlight:Destroy()
        end
    end
    ItemHighlights = {}
end

local function UpdateItemESP()
    for item, highlight in pairs(ItemHighlights) do
        if highlight then
            highlight.FillColor = ESP_ItemColor
            highlight.OutlineColor = ESP_ItemColor
        end
    end
end

-- 金币ESP
local function StartCoinESP()
    if not CoinESPEnabled then return end
    
    ClearCoinESP()
    
    local function UpdateCoinESP()
        if not CoinESPEnabled then return end
        
        for _, coin in ipairs(workspace:GetDescendants()) do
            if (coin.Name:lower():find("coin") or coin.Name:lower():find("money") or 
                coin.Name:lower():find("currency")) and coin:IsA("BasePart") and 
                not CoinHighlights[coin] then
                
                local highlight = Instance.new("Highlight")
                highlight.Parent = coin
                highlight.Adornee = coin
                highlight.FillColor = ESP_CoinColor
                highlight.OutlineColor = ESP_CoinColor
                highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
                
                CoinHighlights[coin] = highlight
            elseif CoinHighlights[coin] and not coin.Parent then
                CoinHighlights[coin]:Destroy()
                CoinHighlights[coin] = nil
            end
        end
    end
    
    UpdateCoinESP()
    
    local conn
    conn = RunService.Heartbeat:Connect(function()
        if not CoinESPEnabled then
            conn:Disconnect()
            return
        end
        UpdateCoinESP()
    end)
end

local function ClearCoinESP()
    for coin, highlight in pairs(CoinHighlights) do
        if highlight then
            highlight:Destroy()
        end
    end
    CoinHighlights = {}
end

local function UpdateCoinESP()
    for coin, highlight in pairs(CoinHighlights) do
        if highlight then
            highlight.FillColor = ESP_CoinColor
            highlight.OutlineColor = ESP_CoinColor
        end
    end
end

-- 主要功能标签页
Tabs.Main:Toggle({
    Title = "门透视",
    Description = "高亮显示所有门",
    Value = false,
    Callback = function(value)
        DoorESPEnabled = value
        if value then
            StartDoorESP()
        else
            for door, highlight in pairs(HighlightedDoors) do
                if highlight then
                    highlight:Destroy()
                end
            end
            HighlightedDoors = {}
        end
    end
})

Tabs.Main:Colorpicker({
    Title = "真门颜色",
    Default = Color3.fromRGB(0, 255, 0),
    Callback = function(Value)
        ESP_SafeColor = Value
        UpdateDoorHighlights()
    end
})

Tabs.Main:Colorpicker({
    Title = "假门颜色",
    Default = Color3.fromRGB(255, 0, 0),
    Callback = function(Value)
        ESP_DangerColor = Value
        UpdateDoorHighlights()
    end
})

-- 透视功能标签页
Tabs.ESP:Toggle({
    Title = "玩家透视",
    Value = false,
    Callback = function(value)
        PlayerESPEnabled = value
        if value then
            StartPlayerESP()
        else
            ClearPlayerESP()
        end
    end
})

Tabs.ESP:Toggle({
    Title = "实体透视",
    Value = false,
    Callback = function(value)
        EntityESPEnabled = value
        if value then
            StartEntityESP()
        else
            ClearEntityESP()
        end
    end
})

Tabs.ESP:Toggle({
    Title = "物品透视",
    Value = false,
    Callback = function(value)
        ItemESPEnabled = value
        if value then
            StartItemESP()
        else
            ClearItemESP()
        end
    end
})

Tabs.ESP:Toggle({
    Title = "金币透视",
    Value = false,
    Callback = function(value)
        CoinESPEnabled = value
        if value then
            StartCoinESP()
        else
            ClearCoinESP()
        end
    end
})

Tabs.ESP:Colorpicker({
    Title = "玩家颜色",
    Default = Color3.fromRGB(0, 162, 255),
    Callback = function(Value)
        ESP_PlayerColor = Value
        UpdatePlayerESP()
    end
})

Tabs.ESP:Colorpicker({
    Title = "实体颜色",
    Default = Color3.fromRGB(255, 0, 0),
    Callback = function(Value)
        ESP_EntityColor = Value
        UpdateEntityESP()
    end
})

Tabs.ESP:Colorpicker({
    Title = "物品颜色",
    Default = Color3.fromRGB(0, 255, 0),
    Callback = function(Value)
        ESP_ItemColor = Value
        UpdateItemESP()
    end
})

Tabs.ESP:Colorpicker({
    Title = "金币颜色",
    Default = Color3.fromRGB(255, 255, 0),
    Callback = function(Value)
        ESP_CoinColor = Value
        UpdateCoinESP()
    end
})

-- 自动功能标签页
Tabs.Auto:Toggle({
    Title = "自动开门",
    Description = "自动与附近的门互动",
    Value = false,
    Callback = function(value)
        AutoInteractEnabled = value
        if value then
            StartAutoInteract()
        end
    end
})

Tabs.Auto:Slider({
    Title = "互动距离",
    Default = 10,
    Min = 5,
    Max = 30,
    Callback = function(Value)
        AutoInteractDistance = Value
    end
})

Tabs.Auto:Toggle({
    Title = "自动躲避",
    Description = "自动躲避附近的实体",
    Value = false,
    Callback = function(value)
        AutoAvoidEnabled = value
        if value then
            StartAutoAvoid()
        end
    end
})

-- 玩家修改标签页
Tabs.Player:Toggle({
    Title = "速度修改",
    Description = "修改移动速度",
    Value = false,
    Callback = function(value)
        SpeedHackEnabled = value
        if value then
            ApplySpeedMod()
        else
            ResetSpeed()
        end
    end
})

Tabs.Player:Slider({
    Title = "移动速度",
    Default = 16,
    Min = 16,
    Max = 100,
    Callback = function(Value)
        if SpeedHackEnabled then
            SetWalkSpeed(Value)
        end
    end
})

Tabs.Player:Toggle({
    Title = "无限跳跃",
    Description = "无限跳跃",
    Value = false,
    Callback = function(value)
        InfiniteJumpEnabled = value
        if value then
            EnableInfiniteJump()
        else
            DisableInfiniteJump()
        end
    end
})

-- 其他功能标签页
Tabs.Misc:Button({
    Title = "清空所有ESP",
    Callback = function()
        ClearPlayerESP()
        ClearEntityESP()
        ClearItemESP()
        ClearCoinESP()
        for door, highlight in pairs(HighlightedDoors) do
            if highlight then
                highlight:Destroy()
            end
        end
        HighlightedDoors = {}
        WindUI:Notify({Title = "提示", Content = "已清除所有ESP", Duration = 2})
    end
})

Tabs.Misc:Button({
    Title = "重置所有设置",
    Callback = function()
        DoorESPEnabled = false
        AutoInteractEnabled = false
        AutoAvoidEnabled = false
        SpeedHackEnabled = false
        InfiniteJumpEnabled = false
        PlayerESPEnabled = false
        EntityESPEnabled = false
        ItemESPEnabled = false
        CoinESPEnabled = false
        
        for door, highlight in pairs(HighlightedDoors) do
            if highlight then
                highlight:Destroy()
            end
        end
        HighlightedDoors = {}
        
        ClearPlayerESP()
        ClearEntityESP()
        ClearItemESP()
        ClearCoinESP()
        
        if InfiniteJumpConnection then
            InfiniteJumpConnection:Disconnect()
            InfiniteJumpConnection = nil
        end
        
        ResetSpeed()
        
        WindUI:Notify({Title = "提示", Content = "已重置所有设置", Duration = 2})
    end
})

WindUI:Init()
WindUI:Notify("戊脚本Doors", "脚本已加载成功！")
