local WindUI = loadstring(game:HttpGet("https://raw.githubusercontent.com/Footagesus/WindUI/main/dist/main.lua"))()

local Confirmed = false

WindUI:Popup({
    Title = "戊脚本doors",
    Icon = "rbxassetid://129260712070622",
    IconThemed = true,
    Content = "欢迎戊脚本Doors by誓约\n",
    Buttons = {
        {
            Title = "进入脚本",
            Icon = "arrow-right",
            Callback = function() Confirmed = true end,
            Variant = "Primary",
        }
    }
})

repeat wait() until Confirmed

local Window = WindUI:CreateWindow({
    Title = "戊脚本doors",
    Icon = "rbxassetid://129260712070622",
    IconThemed = true,
    Author = "戊脚本doors",
    Folder = "DoorsScript",
    Size = UDim2.fromOffset(600, 450),
    Transparent = true,
    Theme = "Dark",
    User = { Enabled = true },
    SideBarWidth = 200,
    ScrollBarEnabled = true,
})

Window:Tag({
    Title = "v2.1",
    Color = Color3.fromHex("#30ff6a")
})
Window:Tag({
    Title = "Doors", 
    Color = Color3.fromHex("#315dff")
})

local Tabs = {
    Main = Window:Tab({ Title = "主要功能", Icon = "zap" }),
    ESP = Window:Tab({ Title = "透视功能", Icon = "eye" }),
    Auto = Window:Tab({ Title = "自动功能", Icon = "refresh-cw" }),
    Player = Window:Tab({ Title = "玩家修改", Icon = "user" }),
    Misc = Window:Tab({ Title = "其他功能", Icon = "settings" }),
    Debug = Window:Tab({ Title = "调试修复", Icon = "wrench" }),
}

Window:SelectTab(1)

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local LP = Players.LocalPlayer
local Character = LP.Character or LP.CharacterAdded:Wait()

-- 修复的透视系统
local ESPDebugMode = false
local ESPObjects = {
    Doors = {},
    Players = {},
    Entities = {},
    Items = {},
    Coins = {}
}

-- 改进的对象识别系统
local ObjectIdentifier = {
    -- 门识别
    isDoor = function(obj)
        if not obj:IsA("BasePart") and not obj:IsA("Model") then return false end
        
        local name = obj.Name:lower()
        local isDoor = name:find("door") or name:find("gate") or name:find("entrance")
        
        -- 检查门的特征
        if obj:IsA("Model") then
            local hasHinge = obj:FindFirstChild("Hinge") or obj:FindFirstChild("HingeConstraint")
            local hasHandle = obj:FindFirstChild("Handle") or obj:FindFirstChild("Knob")
            return isDoor or (hasHinge and hasHandle)
        end
        
        return isDoor
    end,
    
    -- 实体识别
    isEntity = function(obj)
        if not obj:IsA("Model") then return false end
        
        local name = obj.Name:lower()
        local entityNames = {
            "seek", "rush", "figure", "screech", "ambush", "halt", 
            "monster", "enemy", "creature", "entity"
        }
        
        for _, entityName in ipairs(entityNames) do
            if name:find(entityName) then return true end
        end
        
        -- 检查实体特征
        local hasHumanoid = obj:FindFirstChildOfClass("Humanoid")
        local hasHead = obj:FindFirstChild("Head")
        return hasHumanoid and hasHead and not Players:GetPlayerFromCharacter(obj)
    end,
    
    -- 物品识别
    isItem = function(obj)
        if not obj:IsA("BasePart") and not obj:IsA("Model") then return false end
        
        local name = obj.Name:lower()
        local itemNames = {
            "key", "lockpick", "medkit", "flashlight", "vitamin", "book",
            "item", "tool", "weapon", "potion"
        }
        
        for _, itemName in ipairs(itemNames) do
            if name:find(itemName) then return true end
        end
        
        return false
    end,
    
    -- 金币识别
    isCoin = function(obj)
        if not obj:IsA("BasePart") and not obj:IsA("Model") then return false end
        
        local name = obj.Name:lower()
        return name:find("coin") or name:find("money") or name:find("currency") or name:find("gold")
    end,
    
    -- 玩家识别
    isPlayer = function(obj)
        if not obj:IsA("Model") then return false end
        return Players:GetPlayerFromCharacter(obj) ~= nil and obj ~= LP.Character
    end
}

-- 改进的ESP创建函数
local function createESP(obj, espType, color, text)
    if not obj or not obj.Parent then return nil end
    
    local rootPart = obj:IsA("BasePart") and obj or 
                    (obj:FindFirstChild("HumanoidRootPart") or obj.PrimaryPart or obj:FindFirstChildWhichIsA("BasePart"))
    
    if not rootPart then return nil end
    
    -- 检查是否已存在ESP
    for _, espData in pairs(ESPObjects[espType]) do
        if espData.object == obj and espData.gui and espData.gui.Parent then
            return espData.gui -- 返回现有的ESP
        end
    end
    
    local billboard = Instance.new("BillboardGui")
    billboard.Name = "ESP_" .. espType
    billboard.Adornee = rootPart
    billboard.Size = UDim2.new(0, 100, 0, 40)
    billboard.StudsOffset = Vector3.new(0, 3, 0)
    billboard.AlwaysOnTop = true
    billboard.MaxDistance = 500
    billboard.Parent = rootPart
    
    local label = Instance.new("TextLabel")
    label.Text = text or espType
    label.Size = UDim2.new(1, 0, 1, 0)
    label.BackgroundTransparency = 1
    label.TextColor3 = color
    label.TextStrokeTransparency = 0.3
    label.Font = Enum.Font.GothamBold
    label.TextSize = 14
    label.Parent = billboard
    
    -- 添加调试信息
    if ESPDebugMode then
        local debugLabel = Instance.new("TextLabel")
        debugLabel.Text = obj.Name
        debugLabel.Size = UDim2.new(1, 0, 0, 20)
        debugLabel.Position = UDim2.new(0, 0, 1, 0)
        debugLabel.BackgroundTransparency = 1
        debugLabel.TextColor3 = Color3.new(1, 1, 1)
        debugLabel.TextSize = 10
        debugLabel.Parent = billboard
    end
    
    local espData = {
        object = obj,
        gui = billboard,
        type = espType,
        created = tick()
    }
    
    table.insert(ESPObjects[espType], espData)
    return billboard
end

-- 清理特定类型的ESP
local function clearESP(espType)
    for _, espData in ipairs(ESPObjects[espType]) do
        if espData.gui and espData.gui.Parent then
            espData.gui:Destroy()
        end
    end
    ESPObjects[espType] = {}
end

-- 清理所有ESP
local function clearAllESP()
    for espType, _ in pairs(ESPObjects) do
        clearESP(espType)
    end
end

-- 定期清理无效的ESP对象
local function cleanupInvalidESP()
    for espType, objects in pairs(ESPObjects) do
        for i = #objects, 1, -1 do
            local espData = objects[i]
            if not espData.object or not espData.object.Parent or not espData.gui or not espData.gui.Parent then
                if espData.gui then
                    espData.gui:Destroy()
                end
                table.remove(objects, i)
            end
        end
    end
end

-- 改进的ESP扫描系统
local function scanForObjects(espType, enabled, color, identifierFunc, displayName)
    if not enabled then return end
    
    local foundObjects = {}
    
    -- 扫描工作区中的对象
    for _, obj in ipairs(workspace:GetDescendants()) do
        if identifierFunc(obj) then
            createESP(obj, espType, color, displayName)
            table.insert(foundObjects, obj)
        end
    end
    
    return foundObjects
end

-- 门透视功能
local DoorESPEnabled = false
local ESP_SafeColor = Color3.fromRGB(0, 255, 0)
local ESP_DangerColor = Color3.fromRGB(255, 0, 0)

local function updateDoorESP()
    if not DoorESPEnabled then return end
    
    clearESP("Doors")
    
    for _, obj in ipairs(workspace:GetDescendants()) do
        if ObjectIdentifier.isDoor(obj) then
            local isSafe = obj.Name:lower():find("exit") or obj.Name:lower():find("safe")
            local color = isSafe and ESP_SafeColor or ESP_DangerColor
            createESP(obj, "Doors", color, isSafe and "真门" or "假门")
        end
    end
end

-- 玩家透视
local PlayerESPEnabled = false
local ESP_PlayerColor = Color3.fromRGB(0, 162, 255)

local function updatePlayerESP()
    if not PlayerESPEnabled then return end
    
    clearESP("Players")
    
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LP and player.Character then
            createESP(player.Character, "Players", ESP_PlayerColor, player.Name)
        end
    end
end

-- 实体透视
local EntityESPEnabled = false
local ESP_EntityColor = Color3.fromRGB(255, 0, 0)

local function updateEntityESP()
    if not EntityESPEnabled then return end
    
    clearESP("Entities")
    
    scanForObjects("Entities", true, ESP_EntityColor, ObjectIdentifier.isEntity, "实体")
end

-- 物品透视
local ItemESPEnabled = false
local ESP_ItemColor = Color3.fromRGB(0, 255, 0)

local function updateItemESP()
    if not ItemESPEnabled then return end
    
    clearESP("Items")
    
    scanForObjects("Items", true, ESP_ItemColor, ObjectIdentifier.isItem, "物品")
end

-- 金币透视
local CoinESPEnabled = false
local ESP_CoinColor = Color3.fromRGB(255, 255, 0)

local function updateCoinESP()
    if not CoinESPEnabled then return end
    
    clearESP("Coins")
    
    scanForObjects("Coins", true, ESP_CoinColor, ObjectIdentifier.isCoin, "金币")
end

-- 自动清理和更新循环
local ESPUpdateConnection
local function startESPUpdateLoop()
    if ESPUpdateConnection then
        ESPUpdateConnection:Disconnect()
    end
    
    ESPUpdateConnection = RunService.Heartbeat:Connect(function()
        cleanupInvalidESP()
        
        if DoorESPEnabled then updateDoorESP() end
        if PlayerESPEnabled then updatePlayerESP() end
        if EntityESPEnabled then updateEntityESP() end
        if ItemESPEnabled then updateItemESP() end
        if CoinESPEnabled then updateCoinESP() end
        
        task.wait(1) -- 每秒更新一次
    end)
end

-- 调试功能：显示对象信息
local function debugObjectInfo()
    local objects = workspace:GetDescendants()
    local objectCounts = {
        Doors = 0,
        Players = 0,
        Entities = 0,
        Items = 0,
        Coins = 0,
        Other = 0
    }
    
    for _, obj in ipairs(objects) do
        if ObjectIdentifier.isDoor(obj) then
            objectCounts.Doors = objectCounts.Doors + 1
        elseif ObjectIdentifier.isPlayer(obj) then
            objectCounts.Players = objectCounts.Players + 1
        elseif ObjectIdentifier.isEntity(obj) then
            objectCounts.Entities = objectCounts.Entities + 1
        elseif ObjectIdentifier.isItem(obj) then
            objectCounts.Items = objectCounts.Items + 1
        elseif ObjectIdentifier.isCoin(obj) then
            objectCounts.Coins = objectCounts.Coins + 1
        else
            objectCounts.Other = objectCounts.Other + 1
        end
    end
    
    return objectCounts
end

-- 主要功能标签页
Tabs.Main:Toggle({
    Title = "门透视",
    Description = "高亮显示所有门",
    Value = false,
    Callback = function(value)
        DoorESPEnabled = value
        if value then
            updateDoorESP()
        else
            clearESP("Doors")
        end
    end
})

Tabs.Main:Colorpicker({
    Title = "真门颜色",
    Default = Color3.fromRGB(0, 255, 0),
    Callback = function(Value)
        ESP_SafeColor = Value
        updateDoorESP()
    end
})

Tabs.Main:Colorpicker({
    Title = "假门颜色",
    Default = Color3.fromRGB(255, 0, 0),
    Callback = function(Value)
        ESP_DangerColor = Value
        updateDoorESP()
    end
})

-- 透视功能标签页
Tabs.ESP:Toggle({
    Title = "玩家透视",
    Value = false,
    Callback = function(value)
        PlayerESPEnabled = value
        if value then
            updatePlayerESP()
        else
            clearESP("Players")
        end
    end
})

Tabs.ESP:Toggle({
    Title = "实体透视",
    Value = false,
    Callback = function(value)
        EntityESPEnabled = value
        if value then
            updateEntityESP()
        else
            clearESP("Entities")
        end
    end
})

Tabs.ESP:Toggle({
    Title = "物品透视",
    Value = false,
    Callback = function(value)
        ItemESPEnabled = value
        if value then
            updateItemESP()
        else
            clearESP("Items")
        end
    end
})

Tabs.ESP:Toggle({
    Title = "金币透视",
    Value = false,
    Callback = function(value)
        CoinESPEnabled = value
        if value then
            updateCoinESP()
        else
            clearESP("Coins")
        end
    end
})

Tabs.ESP:Colorpicker({
    Title = "玩家颜色",
    Default = Color3.fromRGB(0, 162, 255),
    Callback = function(Value)
        ESP_PlayerColor = Value
        updatePlayerESP()
    end
})

Tabs.ESP:Colorpicker({
    Title = "实体颜色",
    Default = Color3.fromRGB(255, 0, 0),
    Callback = function(Value)
        ESP_EntityColor = Value
        updateEntityESP()
    end
})

Tabs.ESP:Colorpicker({
    Title = "物品颜色",
    Default = Color3.fromRGB(0, 255, 0),
    Callback = function(Value)
        ESP_ItemColor = Value
        updateItemESP()
    end
})

Tabs.ESP:Colorpicker({
    Title = "金币颜色",
    Default = Color3.fromRGB(255, 255, 0),
    Callback = function(Value)
        ESP_CoinColor = Value
        updateCoinESP()
    end
})

-- 调试修复标签页
Tabs.Debug:Toggle({
    Title = "调试模式",
    Description = "显示对象名称和调试信息",
    Value = false,
    Callback = function(value)
        ESPDebugMode = value
        clearAllESP()
        -- 重新启用所有激活的ESP
        if DoorESPEnabled then updateDoorESP() end
        if PlayerESPEnabled then updatePlayerESP() end
        if EntityESPEnabled then updateEntityESP() end
        if ItemESPEnabled then updateItemESP() end
        if CoinESPEnabled then updateCoinESP() end
    end
})

Tabs.Debug:Button({
    Title = "强制刷新所有ESP",
    Description = "重新扫描并创建所有ESP",
    Callback = function()
        clearAllESP()
        if DoorESPEnabled then updateDoorESP() end
        if PlayerESPEnabled then updatePlayerESP() end
        if EntityESPEnabled then updateEntityESP() end
        if ItemESPEnabled then updateItemESP() end
        if CoinESPEnabled then updateCoinESP() end
        WindUI:Notify({Title = "调试", Content = "已强制刷新所有ESP", Duration = 2})
    end
})

Tabs.Debug:Button({
    Title = "显示对象统计",
    Description = "显示当前场景中的对象数量",
    Callback = function()
        local counts = debugObjectInfo()
        local message = string.format(
            "对象统计:\n门: %d\n玩家: %d\n实体: %d\n物品: %d\n金币: %d\n其他: %d",
            counts.Doors, counts.Players, counts.Entities, counts.Items, counts.Coins, counts.Other
        )
        WindUI:Notify({Title = "对象统计", Content = message, Duration = 5})
    end
})

Tabs.Debug:Button({
    Title = "修复ESP位置",
    Description = "重新定位所有ESP到正确位置",
    Callback = function()
        for espType, objects in pairs(ESPObjects) do
            for _, espData in ipairs(objects) do
                if espData.gui and espData.gui.Parent and espData.object and espData.object.Parent then
                    local rootPart = espData.object:IsA("BasePart") and espData.object or 
                                   (espData.object:FindFirstChild("HumanoidRootPart") or 
                                    espData.object.PrimaryPart or 
                                    espData.object:FindFirstChildWhichIsA("BasePart"))
                    if rootPart then
                        espData.gui.Adornee = rootPart
                    end
                end
            end
        end
        WindUI:Notify({Title = "调试", Content = "已修复ESP位置", Duration = 2})
    end
})

-- 其他功能标签页
Tabs.Misc:Button({
    Title = "清空所有ESP",
    Callback = function()
        clearAllESP()
        WindUI:Notify({Title = "提示", Content = "已清除所有ESP", Duration = 2})
    end
})

Tabs.Misc:Button({
    Title = "重置所有设置",
    Callback = function()
        DoorESPEnabled = false
        PlayerESPEnabled = false
        EntityESPEnabled = false
        ItemESPEnabled = false
        CoinESPEnabled = false
        ESPDebugMode = false
        
        clearAllESP()
        
        WindUI:Notify({Title = "提示", Content = "已重置所有设置", Duration = 2})
    end
})

-- 启动ESP更新循环
startESPUpdateLoop()

WindUI:Init()
WindUI:Notify("戊脚本Doors ", "脚本已加载！")
